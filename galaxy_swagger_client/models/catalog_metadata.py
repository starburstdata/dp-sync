# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CatalogMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_id': 'str',
        'catalog_name': 'str',
        'description': 'str',
        'role_with_name': 'RoleWithName',
        'tag_name': 'list[TagName]',
        'contacts': 'list[Contacts]'
    }

    attribute_map = {
        'catalog_id': 'catalogId',
        'catalog_name': 'catalogName',
        'description': 'description',
        'role_with_name': 'roleWithName',
        'tag_name': 'tagName',
        'contacts': 'contacts'
    }

    def __init__(self, catalog_id=None, catalog_name=None, description=None, role_with_name=None, tag_name=None, contacts=None):  # noqa: E501
        """CatalogMetadata - a model defined in Swagger"""  # noqa: E501
        self._catalog_id = None
        self._catalog_name = None
        self._description = None
        self._role_with_name = None
        self._tag_name = None
        self._contacts = None
        self.discriminator = None
        self.catalog_id = catalog_id
        self.catalog_name = catalog_name
        if description is not None:
            self.description = description
        if role_with_name is not None:
            self.role_with_name = role_with_name
        self.tag_name = tag_name
        self.contacts = contacts

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CatalogMetadata.  # noqa: E501

        Catalog ID (read only)  # noqa: E501

        :return: The catalog_id of this CatalogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CatalogMetadata.

        Catalog ID (read only)  # noqa: E501

        :param catalog_id: The catalog_id of this CatalogMetadata.  # noqa: E501
        :type: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501

        self._catalog_id = catalog_id

    @property
    def catalog_name(self):
        """Gets the catalog_name of this CatalogMetadata.  # noqa: E501

        Catalog name (read only)  # noqa: E501

        :return: The catalog_name of this CatalogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """Sets the catalog_name of this CatalogMetadata.

        Catalog name (read only)  # noqa: E501

        :param catalog_name: The catalog_name of this CatalogMetadata.  # noqa: E501
        :type: str
        """
        if catalog_name is None:
            raise ValueError("Invalid value for `catalog_name`, must not be `None`")  # noqa: E501

        self._catalog_name = catalog_name

    @property
    def description(self):
        """Gets the description of this CatalogMetadata.  # noqa: E501

        Any description set for this catalog (read only)  # noqa: E501

        :return: The description of this CatalogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogMetadata.

        Any description set for this catalog (read only)  # noqa: E501

        :param description: The description of this CatalogMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def role_with_name(self):
        """Gets the role_with_name of this CatalogMetadata.  # noqa: E501


        :return: The role_with_name of this CatalogMetadata.  # noqa: E501
        :rtype: RoleWithName
        """
        return self._role_with_name

    @role_with_name.setter
    def role_with_name(self, role_with_name):
        """Sets the role_with_name of this CatalogMetadata.


        :param role_with_name: The role_with_name of this CatalogMetadata.  # noqa: E501
        :type: RoleWithName
        """

        self._role_with_name = role_with_name

    @property
    def tag_name(self):
        """Gets the tag_name of this CatalogMetadata.  # noqa: E501


        :return: The tag_name of this CatalogMetadata.  # noqa: E501
        :rtype: list[TagName]
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this CatalogMetadata.


        :param tag_name: The tag_name of this CatalogMetadata.  # noqa: E501
        :type: list[TagName]
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    @property
    def contacts(self):
        """Gets the contacts of this CatalogMetadata.  # noqa: E501


        :return: The contacts of this CatalogMetadata.  # noqa: E501
        :rtype: list[Contacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CatalogMetadata.


        :param contacts: The contacts of this CatalogMetadata.  # noqa: E501
        :type: list[Contacts]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
