# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'cluster_id': 'str',
        'name': 'str',
        'cloud_region_id': 'str',
        'catalog_refs': 'list[str]',
        'idle_stop_minutes': 'int',
        'batch_cluster': 'bool',
        'warp_speed_cluster': 'bool',
        'min_workers': 'int',
        'max_workers': 'int',
        'cluster_state': 'str',
        'trino_uri': 'str'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'cluster_id': 'clusterId',
        'name': 'name',
        'cloud_region_id': 'cloudRegionId',
        'catalog_refs': 'catalogRefs',
        'idle_stop_minutes': 'idleStopMinutes',
        'batch_cluster': 'batchCluster',
        'warp_speed_cluster': 'warpSpeedCluster',
        'min_workers': 'minWorkers',
        'max_workers': 'maxWorkers',
        'cluster_state': 'clusterState',
        'trino_uri': 'trinoUri'
    }

    def __init__(self, sync_token=None, cluster_id=None, name=None, cloud_region_id=None, catalog_refs=None, idle_stop_minutes=None, batch_cluster=None, warp_speed_cluster=None, min_workers=None, max_workers=None, cluster_state=None, trino_uri=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._cluster_id = None
        self._name = None
        self._cloud_region_id = None
        self._catalog_refs = None
        self._idle_stop_minutes = None
        self._batch_cluster = None
        self._warp_speed_cluster = None
        self._min_workers = None
        self._max_workers = None
        self._cluster_state = None
        self._trino_uri = None
        self.discriminator = None
        self.sync_token = sync_token
        self.cluster_id = cluster_id
        self.name = name
        self.cloud_region_id = cloud_region_id
        self.catalog_refs = catalog_refs
        if idle_stop_minutes is not None:
            self.idle_stop_minutes = idle_stop_minutes
        self.batch_cluster = batch_cluster
        self.warp_speed_cluster = warp_speed_cluster
        self.min_workers = min_workers
        self.max_workers = max_workers
        if cluster_state is not None:
            self.cluster_state = cluster_state
        if trino_uri is not None:
            self.trino_uri = trino_uri

    @property
    def sync_token(self):
        """Gets the sync_token of this Cluster.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this Cluster.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this Cluster.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Cluster.  # noqa: E501

        Cluster ID (read only)  # noqa: E501

        :return: The cluster_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Cluster.

        Cluster ID (read only)  # noqa: E501

        :param cluster_id: The cluster_id of this Cluster.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501

        Cluster name (read only)  # noqa: E501

        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        Cluster name (read only)  # noqa: E501

        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud_region_id(self):
        """Gets the cloud_region_id of this Cluster.  # noqa: E501

        Cloud region ID (read only)  # noqa: E501

        :return: The cloud_region_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._cloud_region_id

    @cloud_region_id.setter
    def cloud_region_id(self, cloud_region_id):
        """Sets the cloud_region_id of this Cluster.

        Cloud region ID (read only)  # noqa: E501

        :param cloud_region_id: The cloud_region_id of this Cluster.  # noqa: E501
        :type: str
        """
        if cloud_region_id is None:
            raise ValueError("Invalid value for `cloud_region_id`, must not be `None`")  # noqa: E501

        self._cloud_region_id = cloud_region_id

    @property
    def catalog_refs(self):
        """Gets the catalog_refs of this Cluster.  # noqa: E501


        :return: The catalog_refs of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._catalog_refs

    @catalog_refs.setter
    def catalog_refs(self, catalog_refs):
        """Sets the catalog_refs of this Cluster.


        :param catalog_refs: The catalog_refs of this Cluster.  # noqa: E501
        :type: list[str]
        """
        if catalog_refs is None:
            raise ValueError("Invalid value for `catalog_refs`, must not be `None`")  # noqa: E501

        self._catalog_refs = catalog_refs

    @property
    def idle_stop_minutes(self):
        """Gets the idle_stop_minutes of this Cluster.  # noqa: E501

        Idle stop duration (in minutes) (read only)  # noqa: E501

        :return: The idle_stop_minutes of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._idle_stop_minutes

    @idle_stop_minutes.setter
    def idle_stop_minutes(self, idle_stop_minutes):
        """Sets the idle_stop_minutes of this Cluster.

        Idle stop duration (in minutes) (read only)  # noqa: E501

        :param idle_stop_minutes: The idle_stop_minutes of this Cluster.  # noqa: E501
        :type: int
        """

        self._idle_stop_minutes = idle_stop_minutes

    @property
    def batch_cluster(self):
        """Gets the batch_cluster of this Cluster.  # noqa: E501

        Supports resource intensive query processing mode (read only)  # noqa: E501

        :return: The batch_cluster of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._batch_cluster

    @batch_cluster.setter
    def batch_cluster(self, batch_cluster):
        """Sets the batch_cluster of this Cluster.

        Supports resource intensive query processing mode (read only)  # noqa: E501

        :param batch_cluster: The batch_cluster of this Cluster.  # noqa: E501
        :type: bool
        """
        if batch_cluster is None:
            raise ValueError("Invalid value for `batch_cluster`, must not be `None`")  # noqa: E501

        self._batch_cluster = batch_cluster

    @property
    def warp_speed_cluster(self):
        """Gets the warp_speed_cluster of this Cluster.  # noqa: E501

        Supports warp speed mode (read only)  # noqa: E501

        :return: The warp_speed_cluster of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._warp_speed_cluster

    @warp_speed_cluster.setter
    def warp_speed_cluster(self, warp_speed_cluster):
        """Sets the warp_speed_cluster of this Cluster.

        Supports warp speed mode (read only)  # noqa: E501

        :param warp_speed_cluster: The warp_speed_cluster of this Cluster.  # noqa: E501
        :type: bool
        """
        if warp_speed_cluster is None:
            raise ValueError("Invalid value for `warp_speed_cluster`, must not be `None`")  # noqa: E501

        self._warp_speed_cluster = warp_speed_cluster

    @property
    def min_workers(self):
        """Gets the min_workers of this Cluster.  # noqa: E501

        Minimum worker count (read only)  # noqa: E501

        :return: The min_workers of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._min_workers

    @min_workers.setter
    def min_workers(self, min_workers):
        """Sets the min_workers of this Cluster.

        Minimum worker count (read only)  # noqa: E501

        :param min_workers: The min_workers of this Cluster.  # noqa: E501
        :type: int
        """
        if min_workers is None:
            raise ValueError("Invalid value for `min_workers`, must not be `None`")  # noqa: E501

        self._min_workers = min_workers

    @property
    def max_workers(self):
        """Gets the max_workers of this Cluster.  # noqa: E501

        Maximum worker count (read only)  # noqa: E501

        :return: The max_workers of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this Cluster.

        Maximum worker count (read only)  # noqa: E501

        :param max_workers: The max_workers of this Cluster.  # noqa: E501
        :type: int
        """
        if max_workers is None:
            raise ValueError("Invalid value for `max_workers`, must not be `None`")  # noqa: E501

        self._max_workers = max_workers

    @property
    def cluster_state(self):
        """Gets the cluster_state of this Cluster.  # noqa: E501

        Cluster state (read only)  # noqa: E501

        :return: The cluster_state of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_state

    @cluster_state.setter
    def cluster_state(self, cluster_state):
        """Sets the cluster_state of this Cluster.

        Cluster state (read only)  # noqa: E501

        :param cluster_state: The cluster_state of this Cluster.  # noqa: E501
        :type: str
        """

        self._cluster_state = cluster_state

    @property
    def trino_uri(self):
        """Gets the trino_uri of this Cluster.  # noqa: E501

        Connection URL (read only)  # noqa: E501

        :return: The trino_uri of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._trino_uri

    @trino_uri.setter
    def trino_uri(self, trino_uri):
        """Sets the trino_uri of this Cluster.

        Connection URL (read only)  # noqa: E501

        :param trino_uri: The trino_uri of this Cluster.  # noqa: E501
        :type: str
        """

        self._trino_uri = trino_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
