# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Column(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_id': 'str',
        'data_type': 'str',
        'column_default': 'str',
        'nullable': 'bool',
        'description': 'str',
        'tag_name': 'list[TagName]'
    }

    attribute_map = {
        'column_id': 'columnId',
        'data_type': 'dataType',
        'column_default': 'columnDefault',
        'nullable': 'nullable',
        'description': 'description',
        'tag_name': 'tagName'
    }

    def __init__(self, column_id=None, data_type=None, column_default=None, nullable=None, description=None, tag_name=None):  # noqa: E501
        """Column - a model defined in Swagger"""  # noqa: E501
        self._column_id = None
        self._data_type = None
        self._column_default = None
        self._nullable = None
        self._description = None
        self._tag_name = None
        self.discriminator = None
        self.column_id = column_id
        if data_type is not None:
            self.data_type = data_type
        if column_default is not None:
            self.column_default = column_default
        self.nullable = nullable
        if description is not None:
            self.description = description
        self.tag_name = tag_name

    @property
    def column_id(self):
        """Gets the column_id of this Column.  # noqa: E501

        Column ID (read only)  # noqa: E501

        :return: The column_id of this Column.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this Column.

        Column ID (read only)  # noqa: E501

        :param column_id: The column_id of this Column.  # noqa: E501
        :type: str
        """
        if column_id is None:
            raise ValueError("Invalid value for `column_id`, must not be `None`")  # noqa: E501

        self._column_id = column_id

    @property
    def data_type(self):
        """Gets the data_type of this Column.  # noqa: E501

        Any data type returned from the data source (read only)  # noqa: E501

        :return: The data_type of this Column.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Column.

        Any data type returned from the data source (read only)  # noqa: E501

        :param data_type: The data_type of this Column.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def column_default(self):
        """Gets the column_default of this Column.  # noqa: E501

        Any column default returned from the data source (read only)  # noqa: E501

        :return: The column_default of this Column.  # noqa: E501
        :rtype: str
        """
        return self._column_default

    @column_default.setter
    def column_default(self, column_default):
        """Sets the column_default of this Column.

        Any column default returned from the data source (read only)  # noqa: E501

        :param column_default: The column_default of this Column.  # noqa: E501
        :type: str
        """

        self._column_default = column_default

    @property
    def nullable(self):
        """Gets the nullable of this Column.  # noqa: E501

        Whether the column is nullable or not (read only)  # noqa: E501

        :return: The nullable of this Column.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this Column.

        Whether the column is nullable or not (read only)  # noqa: E501

        :param nullable: The nullable of this Column.  # noqa: E501
        :type: bool
        """
        if nullable is None:
            raise ValueError("Invalid value for `nullable`, must not be `None`")  # noqa: E501

        self._nullable = nullable

    @property
    def description(self):
        """Gets the description of this Column.  # noqa: E501

        Any description set for this column (read only)  # noqa: E501

        :return: The description of this Column.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Column.

        Any description set for this column (read only)  # noqa: E501

        :param description: The description of this Column.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tag_name(self):
        """Gets the tag_name of this Column.  # noqa: E501


        :return: The tag_name of this Column.  # noqa: E501
        :rtype: list[TagName]
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this Column.


        :param tag_name: The tag_name of this Column.  # noqa: E501
        :type: list[TagName]
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Column, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
