# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ColumnMask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'column_mask_id': 'str',
        'name': 'str',
        'expression': 'str',
        'column_mask_type': 'str',
        'description': 'str',
        'created': 'datetime',
        'modified': 'datetime'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'column_mask_id': 'columnMaskId',
        'name': 'name',
        'expression': 'expression',
        'column_mask_type': 'columnMaskType',
        'description': 'description',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, sync_token=None, column_mask_id=None, name=None, expression=None, column_mask_type=None, description=None, created=None, modified=None):  # noqa: E501
        """ColumnMask - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._column_mask_id = None
        self._name = None
        self._expression = None
        self._column_mask_type = None
        self._description = None
        self._created = None
        self._modified = None
        self.discriminator = None
        self.sync_token = sync_token
        self.column_mask_id = column_mask_id
        self.name = name
        self.expression = expression
        self.column_mask_type = column_mask_type
        self.description = description
        self.created = created
        self.modified = modified

    @property
    def sync_token(self):
        """Gets the sync_token of this ColumnMask.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this ColumnMask.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this ColumnMask.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def column_mask_id(self):
        """Gets the column_mask_id of this ColumnMask.  # noqa: E501

        Column Mask ID (read only)  # noqa: E501

        :return: The column_mask_id of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._column_mask_id

    @column_mask_id.setter
    def column_mask_id(self, column_mask_id):
        """Sets the column_mask_id of this ColumnMask.

        Column Mask ID (read only)  # noqa: E501

        :param column_mask_id: The column_mask_id of this ColumnMask.  # noqa: E501
        :type: str
        """
        if column_mask_id is None:
            raise ValueError("Invalid value for `column_mask_id`, must not be `None`")  # noqa: E501

        self._column_mask_id = column_mask_id

    @property
    def name(self):
        """Gets the name of this ColumnMask.  # noqa: E501

        Column Mask name (read only)  # noqa: E501

        :return: The name of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnMask.

        Column Mask name (read only)  # noqa: E501

        :param name: The name of this ColumnMask.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this ColumnMask.  # noqa: E501

        Column Mask expression (read only)  # noqa: E501

        :return: The expression of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ColumnMask.

        Column Mask expression (read only)  # noqa: E501

        :param expression: The expression of this ColumnMask.  # noqa: E501
        :type: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501

        self._expression = expression

    @property
    def column_mask_type(self):
        """Gets the column_mask_type of this ColumnMask.  # noqa: E501

        Column Mask type (read only)  # noqa: E501

        :return: The column_mask_type of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._column_mask_type

    @column_mask_type.setter
    def column_mask_type(self, column_mask_type):
        """Sets the column_mask_type of this ColumnMask.

        Column Mask type (read only)  # noqa: E501

        :param column_mask_type: The column_mask_type of this ColumnMask.  # noqa: E501
        :type: str
        """
        if column_mask_type is None:
            raise ValueError("Invalid value for `column_mask_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Any", "Integer", "Boolean", "Date", "Decimal", "Real", "Double", "Timestamp", "TimestampWithTimeZone", "Time", "TimeWithTimeZone", "Varbinary", "Varchar"]  # noqa: E501
        if column_mask_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_mask_type` ({0}), must be one of {1}"  # noqa: E501
                .format(column_mask_type, allowed_values)
            )

        self._column_mask_type = column_mask_type

    @property
    def description(self):
        """Gets the description of this ColumnMask.  # noqa: E501

        Description (read only)  # noqa: E501

        :return: The description of this ColumnMask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ColumnMask.

        Description (read only)  # noqa: E501

        :param description: The description of this ColumnMask.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created(self):
        """Gets the created of this ColumnMask.  # noqa: E501

        Created on (read only)  # noqa: E501

        :return: The created of this ColumnMask.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ColumnMask.

        Created on (read only)  # noqa: E501

        :param created: The created of this ColumnMask.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ColumnMask.  # noqa: E501

        Modified on (read only)  # noqa: E501

        :return: The modified of this ColumnMask.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ColumnMask.

        Modified on (read only)  # noqa: E501

        :param modified: The modified of this ColumnMask.  # noqa: E501
        :type: datetime
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnMask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnMask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
