# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cloud_region_id': 'str',
        'catalog_refs': 'list[str]',
        'idle_stop_minutes': 'int',
        'processing_mode': 'str',
        'min_workers': 'int',
        'max_workers': 'int',
        'warp_resiliency_enabled': 'bool',
        'result_cache_enabled': 'bool',
        'result_cache_default_visibility_seconds': 'int',
        'private_link_cluster': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'cloud_region_id': 'cloudRegionId',
        'catalog_refs': 'catalogRefs',
        'idle_stop_minutes': 'idleStopMinutes',
        'processing_mode': 'processingMode',
        'min_workers': 'minWorkers',
        'max_workers': 'maxWorkers',
        'warp_resiliency_enabled': 'warpResiliencyEnabled',
        'result_cache_enabled': 'resultCacheEnabled',
        'result_cache_default_visibility_seconds': 'resultCacheDefaultVisibilitySeconds',
        'private_link_cluster': 'privateLinkCluster'
    }

    def __init__(self, name=None, cloud_region_id=None, catalog_refs=None, idle_stop_minutes=None, processing_mode=None, min_workers=None, max_workers=None, warp_resiliency_enabled=None, result_cache_enabled=None, result_cache_default_visibility_seconds=None, private_link_cluster=None):  # noqa: E501
        """CreateCluster - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._cloud_region_id = None
        self._catalog_refs = None
        self._idle_stop_minutes = None
        self._processing_mode = None
        self._min_workers = None
        self._max_workers = None
        self._warp_resiliency_enabled = None
        self._result_cache_enabled = None
        self._result_cache_default_visibility_seconds = None
        self._private_link_cluster = None
        self.discriminator = None
        self.name = name
        self.cloud_region_id = cloud_region_id
        self.catalog_refs = catalog_refs
        if idle_stop_minutes is not None:
            self.idle_stop_minutes = idle_stop_minutes
        if processing_mode is not None:
            self.processing_mode = processing_mode
        self.min_workers = min_workers
        self.max_workers = max_workers
        self.warp_resiliency_enabled = warp_resiliency_enabled
        self.result_cache_enabled = result_cache_enabled
        if result_cache_default_visibility_seconds is not None:
            self.result_cache_default_visibility_seconds = result_cache_default_visibility_seconds
        self.private_link_cluster = private_link_cluster

    @property
    def name(self):
        """Gets the name of this CreateCluster.  # noqa: E501

        Name of the cluster being created  # noqa: E501

        :return: The name of this CreateCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCluster.

        Name of the cluster being created  # noqa: E501

        :param name: The name of this CreateCluster.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cloud_region_id(self):
        """Gets the cloud_region_id of this CreateCluster.  # noqa: E501

        Cloud region ID of where the cluster will be created  # noqa: E501

        :return: The cloud_region_id of this CreateCluster.  # noqa: E501
        :rtype: str
        """
        return self._cloud_region_id

    @cloud_region_id.setter
    def cloud_region_id(self, cloud_region_id):
        """Sets the cloud_region_id of this CreateCluster.

        Cloud region ID of where the cluster will be created  # noqa: E501

        :param cloud_region_id: The cloud_region_id of this CreateCluster.  # noqa: E501
        :type: str
        """
        if cloud_region_id is None:
            raise ValueError("Invalid value for `cloud_region_id`, must not be `None`")  # noqa: E501

        self._cloud_region_id = cloud_region_id

    @property
    def catalog_refs(self):
        """Gets the catalog_refs of this CreateCluster.  # noqa: E501


        :return: The catalog_refs of this CreateCluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._catalog_refs

    @catalog_refs.setter
    def catalog_refs(self, catalog_refs):
        """Sets the catalog_refs of this CreateCluster.


        :param catalog_refs: The catalog_refs of this CreateCluster.  # noqa: E501
        :type: list[str]
        """
        if catalog_refs is None:
            raise ValueError("Invalid value for `catalog_refs`, must not be `None`")  # noqa: E501

        self._catalog_refs = catalog_refs

    @property
    def idle_stop_minutes(self):
        """Gets the idle_stop_minutes of this CreateCluster.  # noqa: E501

        Idle suspend duration (in minutes)  # noqa: E501

        :return: The idle_stop_minutes of this CreateCluster.  # noqa: E501
        :rtype: int
        """
        return self._idle_stop_minutes

    @idle_stop_minutes.setter
    def idle_stop_minutes(self, idle_stop_minutes):
        """Sets the idle_stop_minutes of this CreateCluster.

        Idle suspend duration (in minutes)  # noqa: E501

        :param idle_stop_minutes: The idle_stop_minutes of this CreateCluster.  # noqa: E501
        :type: int
        """

        self._idle_stop_minutes = idle_stop_minutes

    @property
    def processing_mode(self):
        """Gets the processing_mode of this CreateCluster.  # noqa: E501

        Cluster query processing mode  # noqa: E501

        :return: The processing_mode of this CreateCluster.  # noqa: E501
        :rtype: str
        """
        return self._processing_mode

    @processing_mode.setter
    def processing_mode(self, processing_mode):
        """Sets the processing_mode of this CreateCluster.

        Cluster query processing mode  # noqa: E501

        :param processing_mode: The processing_mode of this CreateCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["Batch", "WarpSpeed"]  # noqa: E501
        if processing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(processing_mode, allowed_values)
            )

        self._processing_mode = processing_mode

    @property
    def min_workers(self):
        """Gets the min_workers of this CreateCluster.  # noqa: E501

        Minimum worker count  # noqa: E501

        :return: The min_workers of this CreateCluster.  # noqa: E501
        :rtype: int
        """
        return self._min_workers

    @min_workers.setter
    def min_workers(self, min_workers):
        """Sets the min_workers of this CreateCluster.

        Minimum worker count  # noqa: E501

        :param min_workers: The min_workers of this CreateCluster.  # noqa: E501
        :type: int
        """
        if min_workers is None:
            raise ValueError("Invalid value for `min_workers`, must not be `None`")  # noqa: E501

        self._min_workers = min_workers

    @property
    def max_workers(self):
        """Gets the max_workers of this CreateCluster.  # noqa: E501

        Maximum worker count  # noqa: E501

        :return: The max_workers of this CreateCluster.  # noqa: E501
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this CreateCluster.

        Maximum worker count  # noqa: E501

        :param max_workers: The max_workers of this CreateCluster.  # noqa: E501
        :type: int
        """
        if max_workers is None:
            raise ValueError("Invalid value for `max_workers`, must not be `None`")  # noqa: E501

        self._max_workers = max_workers

    @property
    def warp_resiliency_enabled(self):
        """Gets the warp_resiliency_enabled of this CreateCluster.  # noqa: E501

        Enable/Disable warp resiliency  # noqa: E501

        :return: The warp_resiliency_enabled of this CreateCluster.  # noqa: E501
        :rtype: bool
        """
        return self._warp_resiliency_enabled

    @warp_resiliency_enabled.setter
    def warp_resiliency_enabled(self, warp_resiliency_enabled):
        """Sets the warp_resiliency_enabled of this CreateCluster.

        Enable/Disable warp resiliency  # noqa: E501

        :param warp_resiliency_enabled: The warp_resiliency_enabled of this CreateCluster.  # noqa: E501
        :type: bool
        """
        if warp_resiliency_enabled is None:
            raise ValueError("Invalid value for `warp_resiliency_enabled`, must not be `None`")  # noqa: E501

        self._warp_resiliency_enabled = warp_resiliency_enabled

    @property
    def result_cache_enabled(self):
        """Gets the result_cache_enabled of this CreateCluster.  # noqa: E501

        Enable/Disable resultset caching  # noqa: E501

        :return: The result_cache_enabled of this CreateCluster.  # noqa: E501
        :rtype: bool
        """
        return self._result_cache_enabled

    @result_cache_enabled.setter
    def result_cache_enabled(self, result_cache_enabled):
        """Sets the result_cache_enabled of this CreateCluster.

        Enable/Disable resultset caching  # noqa: E501

        :param result_cache_enabled: The result_cache_enabled of this CreateCluster.  # noqa: E501
        :type: bool
        """
        if result_cache_enabled is None:
            raise ValueError("Invalid value for `result_cache_enabled`, must not be `None`")  # noqa: E501

        self._result_cache_enabled = result_cache_enabled

    @property
    def result_cache_default_visibility_seconds(self):
        """Gets the result_cache_default_visibility_seconds of this CreateCluster.  # noqa: E501

        Default visibility for resultset caching (in seconds)  # noqa: E501

        :return: The result_cache_default_visibility_seconds of this CreateCluster.  # noqa: E501
        :rtype: int
        """
        return self._result_cache_default_visibility_seconds

    @result_cache_default_visibility_seconds.setter
    def result_cache_default_visibility_seconds(self, result_cache_default_visibility_seconds):
        """Sets the result_cache_default_visibility_seconds of this CreateCluster.

        Default visibility for resultset caching (in seconds)  # noqa: E501

        :param result_cache_default_visibility_seconds: The result_cache_default_visibility_seconds of this CreateCluster.  # noqa: E501
        :type: int
        """

        self._result_cache_default_visibility_seconds = result_cache_default_visibility_seconds

    @property
    def private_link_cluster(self):
        """Gets the private_link_cluster of this CreateCluster.  # noqa: E501

        Private Link Enabled  # noqa: E501

        :return: The private_link_cluster of this CreateCluster.  # noqa: E501
        :rtype: bool
        """
        return self._private_link_cluster

    @private_link_cluster.setter
    def private_link_cluster(self, private_link_cluster):
        """Sets the private_link_cluster of this CreateCluster.

        Private Link Enabled  # noqa: E501

        :param private_link_cluster: The private_link_cluster of this CreateCluster.  # noqa: E501
        :type: bool
        """
        if private_link_cluster is None:
            raise ValueError("Invalid value for `private_link_cluster`, must not be `None`")  # noqa: E501

        self._private_link_cluster = private_link_cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
