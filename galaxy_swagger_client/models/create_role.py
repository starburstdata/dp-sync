# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_name': 'str',
        'role_description': 'str',
        'grant_to_creating_role': 'bool'
    }

    attribute_map = {
        'role_name': 'roleName',
        'role_description': 'roleDescription',
        'grant_to_creating_role': 'grantToCreatingRole'
    }

    def __init__(self, role_name=None, role_description=None, grant_to_creating_role=None):  # noqa: E501
        """CreateRole - a model defined in Swagger"""  # noqa: E501
        self._role_name = None
        self._role_description = None
        self._grant_to_creating_role = None
        self.discriminator = None
        self.role_name = role_name
        if role_description is not None:
            self.role_description = role_description
        self.grant_to_creating_role = grant_to_creating_role

    @property
    def role_name(self):
        """Gets the role_name of this CreateRole.  # noqa: E501

        Role name (read only)  # noqa: E501

        :return: The role_name of this CreateRole.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this CreateRole.

        Role name (read only)  # noqa: E501

        :param role_name: The role_name of this CreateRole.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def role_description(self):
        """Gets the role_description of this CreateRole.  # noqa: E501

        Role description (read only)  # noqa: E501

        :return: The role_description of this CreateRole.  # noqa: E501
        :rtype: str
        """
        return self._role_description

    @role_description.setter
    def role_description(self, role_description):
        """Sets the role_description of this CreateRole.

        Role description (read only)  # noqa: E501

        :param role_description: The role_description of this CreateRole.  # noqa: E501
        :type: str
        """

        self._role_description = role_description

    @property
    def grant_to_creating_role(self):
        """Gets the grant_to_creating_role of this CreateRole.  # noqa: E501

        Grant to creating role (read only)  # noqa: E501

        :return: The grant_to_creating_role of this CreateRole.  # noqa: E501
        :rtype: bool
        """
        return self._grant_to_creating_role

    @grant_to_creating_role.setter
    def grant_to_creating_role(self, grant_to_creating_role):
        """Sets the grant_to_creating_role of this CreateRole.

        Grant to creating role (read only)  # noqa: E501

        :param grant_to_creating_role: The grant_to_creating_role of this CreateRole.  # noqa: E501
        :type: bool
        """
        if grant_to_creating_role is None:
            raise ValueError("Invalid value for `grant_to_creating_role`, must not be `None`")  # noqa: E501

        self._grant_to_creating_role = grant_to_creating_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
