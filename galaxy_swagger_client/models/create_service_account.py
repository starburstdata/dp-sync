# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateServiceAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'role_id': 'str',
        'additional_role_ids': 'list[str]',
        'with_initial_password': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'role_id': 'roleId',
        'additional_role_ids': 'additionalRoleIds',
        'with_initial_password': 'withInitialPassword'
    }

    def __init__(self, username=None, role_id=None, additional_role_ids=None, with_initial_password=None):  # noqa: E501
        """CreateServiceAccount - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._role_id = None
        self._additional_role_ids = None
        self._with_initial_password = None
        self.discriminator = None
        self.username = username
        if role_id is not None:
            self.role_id = role_id
        self.additional_role_ids = additional_role_ids
        self.with_initial_password = with_initial_password

    @property
    def username(self):
        """Gets the username of this CreateServiceAccount.  # noqa: E501

        Service account name (read only)  # noqa: E501

        :return: The username of this CreateServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateServiceAccount.

        Service account name (read only)  # noqa: E501

        :param username: The username of this CreateServiceAccount.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def role_id(self):
        """Gets the role_id of this CreateServiceAccount.  # noqa: E501

        Default role ID (read only)  # noqa: E501

        :return: The role_id of this CreateServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this CreateServiceAccount.

        Default role ID (read only)  # noqa: E501

        :param role_id: The role_id of this CreateServiceAccount.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def additional_role_ids(self):
        """Gets the additional_role_ids of this CreateServiceAccount.  # noqa: E501


        :return: The additional_role_ids of this CreateServiceAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_role_ids

    @additional_role_ids.setter
    def additional_role_ids(self, additional_role_ids):
        """Sets the additional_role_ids of this CreateServiceAccount.


        :param additional_role_ids: The additional_role_ids of this CreateServiceAccount.  # noqa: E501
        :type: list[str]
        """
        if additional_role_ids is None:
            raise ValueError("Invalid value for `additional_role_ids`, must not be `None`")  # noqa: E501

        self._additional_role_ids = additional_role_ids

    @property
    def with_initial_password(self):
        """Gets the with_initial_password of this CreateServiceAccount.  # noqa: E501

        Whether to create an initial password (read only)  # noqa: E501

        :return: The with_initial_password of this CreateServiceAccount.  # noqa: E501
        :rtype: bool
        """
        return self._with_initial_password

    @with_initial_password.setter
    def with_initial_password(self, with_initial_password):
        """Sets the with_initial_password of this CreateServiceAccount.

        Whether to create an initial password (read only)  # noqa: E501

        :param with_initial_password: The with_initial_password of this CreateServiceAccount.  # noqa: E501
        :type: bool
        """
        if with_initial_password is None:
            raise ValueError("Invalid value for `with_initial_password`, must not be `None`")  # noqa: E501

        self._with_initial_password = with_initial_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateServiceAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateServiceAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
