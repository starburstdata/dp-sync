# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'data_product_id': 'str',
        'name': 'str',
        'summary': 'str',
        'description': 'str',
        'data_product_catalog_details': 'DataProductCatalogDetails',
        'schema_name': 'str',
        'contacts': 'list[Contacts]',
        'links': 'list[Links]',
        'default_cluster_id': 'str',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'created_by': 'Contacts',
        'modified_by': 'Contacts'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'data_product_id': 'dataProductId',
        'name': 'name',
        'summary': 'summary',
        'description': 'description',
        'data_product_catalog_details': 'dataProductCatalogDetails',
        'schema_name': 'schemaName',
        'contacts': 'contacts',
        'links': 'links',
        'default_cluster_id': 'defaultClusterId',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy'
    }

    def __init__(self, sync_token=None, data_product_id=None, name=None, summary=None, description=None, data_product_catalog_details=None, schema_name=None, contacts=None, links=None, default_cluster_id=None, created_on=None, modified_on=None, created_by=None, modified_by=None):  # noqa: E501
        """DataProduct - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._data_product_id = None
        self._name = None
        self._summary = None
        self._description = None
        self._data_product_catalog_details = None
        self._schema_name = None
        self._contacts = None
        self._links = None
        self._default_cluster_id = None
        self._created_on = None
        self._modified_on = None
        self._created_by = None
        self._modified_by = None
        self.discriminator = None
        self.sync_token = sync_token
        self.data_product_id = data_product_id
        self.name = name
        self.summary = summary
        if description is not None:
            self.description = description
        if data_product_catalog_details is not None:
            self.data_product_catalog_details = data_product_catalog_details
        if schema_name is not None:
            self.schema_name = schema_name
        self.contacts = contacts
        self.links = links
        if default_cluster_id is not None:
            self.default_cluster_id = default_cluster_id
        self.created_on = created_on
        self.modified_on = modified_on
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by

    @property
    def sync_token(self):
        """Gets the sync_token of this DataProduct.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this DataProduct.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this DataProduct.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def data_product_id(self):
        """Gets the data_product_id of this DataProduct.  # noqa: E501

        Data Product ID (read only)  # noqa: E501

        :return: The data_product_id of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._data_product_id

    @data_product_id.setter
    def data_product_id(self, data_product_id):
        """Sets the data_product_id of this DataProduct.

        Data Product ID (read only)  # noqa: E501

        :param data_product_id: The data_product_id of this DataProduct.  # noqa: E501
        :type: str
        """
        if data_product_id is None:
            raise ValueError("Invalid value for `data_product_id`, must not be `None`")  # noqa: E501

        self._data_product_id = data_product_id

    @property
    def name(self):
        """Gets the name of this DataProduct.  # noqa: E501

        Data Product name (read only)  # noqa: E501

        :return: The name of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataProduct.

        Data Product name (read only)  # noqa: E501

        :param name: The name of this DataProduct.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this DataProduct.  # noqa: E501

        Short summary of Data Product (read only)  # noqa: E501

        :return: The summary of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DataProduct.

        Short summary of Data Product (read only)  # noqa: E501

        :param summary: The summary of this DataProduct.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this DataProduct.  # noqa: E501

        Long form description of Data Product (read only)  # noqa: E501

        :return: The description of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataProduct.

        Long form description of Data Product (read only)  # noqa: E501

        :param description: The description of this DataProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def data_product_catalog_details(self):
        """Gets the data_product_catalog_details of this DataProduct.  # noqa: E501


        :return: The data_product_catalog_details of this DataProduct.  # noqa: E501
        :rtype: DataProductCatalogDetails
        """
        return self._data_product_catalog_details

    @data_product_catalog_details.setter
    def data_product_catalog_details(self, data_product_catalog_details):
        """Sets the data_product_catalog_details of this DataProduct.


        :param data_product_catalog_details: The data_product_catalog_details of this DataProduct.  # noqa: E501
        :type: DataProductCatalogDetails
        """

        self._data_product_catalog_details = data_product_catalog_details

    @property
    def schema_name(self):
        """Gets the schema_name of this DataProduct.  # noqa: E501

        Name of the data product schema (read only)  # noqa: E501

        :return: The schema_name of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this DataProduct.

        Name of the data product schema (read only)  # noqa: E501

        :param schema_name: The schema_name of this DataProduct.  # noqa: E501
        :type: str
        """

        self._schema_name = schema_name

    @property
    def contacts(self):
        """Gets the contacts of this DataProduct.  # noqa: E501


        :return: The contacts of this DataProduct.  # noqa: E501
        :rtype: list[Contacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DataProduct.


        :param contacts: The contacts of this DataProduct.  # noqa: E501
        :type: list[Contacts]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def links(self):
        """Gets the links of this DataProduct.  # noqa: E501


        :return: The links of this DataProduct.  # noqa: E501
        :rtype: list[Links]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DataProduct.


        :param links: The links of this DataProduct.  # noqa: E501
        :type: list[Links]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def default_cluster_id(self):
        """Gets the default_cluster_id of this DataProduct.  # noqa: E501

        Default cluster ID for Data Product (read only)  # noqa: E501

        :return: The default_cluster_id of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._default_cluster_id

    @default_cluster_id.setter
    def default_cluster_id(self, default_cluster_id):
        """Sets the default_cluster_id of this DataProduct.

        Default cluster ID for Data Product (read only)  # noqa: E501

        :param default_cluster_id: The default_cluster_id of this DataProduct.  # noqa: E501
        :type: str
        """

        self._default_cluster_id = default_cluster_id

    @property
    def created_on(self):
        """Gets the created_on of this DataProduct.  # noqa: E501

        Creation date (read only)  # noqa: E501

        :return: The created_on of this DataProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DataProduct.

        Creation date (read only)  # noqa: E501

        :param created_on: The created_on of this DataProduct.  # noqa: E501
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this DataProduct.  # noqa: E501

        Modified date (read only)  # noqa: E501

        :return: The modified_on of this DataProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this DataProduct.

        Modified date (read only)  # noqa: E501

        :param modified_on: The modified_on of this DataProduct.  # noqa: E501
        :type: datetime
        """
        if modified_on is None:
            raise ValueError("Invalid value for `modified_on`, must not be `None`")  # noqa: E501

        self._modified_on = modified_on

    @property
    def created_by(self):
        """Gets the created_by of this DataProduct.  # noqa: E501


        :return: The created_by of this DataProduct.  # noqa: E501
        :rtype: Contacts
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DataProduct.


        :param created_by: The created_by of this DataProduct.  # noqa: E501
        :type: Contacts
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this DataProduct.  # noqa: E501


        :return: The modified_by of this DataProduct.  # noqa: E501
        :rtype: Contacts
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this DataProduct.


        :param modified_by: The modified_by of this DataProduct.  # noqa: E501
        :type: Contacts
        """

        self._modified_by = modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
