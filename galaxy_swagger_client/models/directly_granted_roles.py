# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DirectlyGrantedRoles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_name': 'str',
        'role_id': 'str',
        'principal': 'Principal',
        'admin_option': 'bool'
    }

    attribute_map = {
        'role_name': 'roleName',
        'role_id': 'roleId',
        'principal': 'principal',
        'admin_option': 'adminOption'
    }

    def __init__(self, role_name=None, role_id=None, principal=None, admin_option=None):  # noqa: E501
        """DirectlyGrantedRoles - a model defined in Swagger"""  # noqa: E501
        self._role_name = None
        self._role_id = None
        self._principal = None
        self._admin_option = None
        self.discriminator = None
        self.role_name = role_name
        self.role_id = role_id
        self.principal = principal
        self.admin_option = admin_option

    @property
    def role_name(self):
        """Gets the role_name of this DirectlyGrantedRoles.  # noqa: E501

        Role name  # noqa: E501

        :return: The role_name of this DirectlyGrantedRoles.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this DirectlyGrantedRoles.

        Role name  # noqa: E501

        :param role_name: The role_name of this DirectlyGrantedRoles.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def role_id(self):
        """Gets the role_id of this DirectlyGrantedRoles.  # noqa: E501

        Role ID  # noqa: E501

        :return: The role_id of this DirectlyGrantedRoles.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this DirectlyGrantedRoles.

        Role ID  # noqa: E501

        :param role_id: The role_id of this DirectlyGrantedRoles.  # noqa: E501
        :type: str
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def principal(self):
        """Gets the principal of this DirectlyGrantedRoles.  # noqa: E501


        :return: The principal of this DirectlyGrantedRoles.  # noqa: E501
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this DirectlyGrantedRoles.


        :param principal: The principal of this DirectlyGrantedRoles.  # noqa: E501
        :type: Principal
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")  # noqa: E501

        self._principal = principal

    @property
    def admin_option(self):
        """Gets the admin_option of this DirectlyGrantedRoles.  # noqa: E501

        Admin option  # noqa: E501

        :return: The admin_option of this DirectlyGrantedRoles.  # noqa: E501
        :rtype: bool
        """
        return self._admin_option

    @admin_option.setter
    def admin_option(self, admin_option):
        """Sets the admin_option of this DirectlyGrantedRoles.

        Admin option  # noqa: E501

        :param admin_option: The admin_option of this DirectlyGrantedRoles.  # noqa: E501
        :type: bool
        """
        if admin_option is None:
            raise ValueError("Invalid value for `admin_option`, must not be `None`")  # noqa: E501

        self._admin_option = admin_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectlyGrantedRoles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectlyGrantedRoles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
