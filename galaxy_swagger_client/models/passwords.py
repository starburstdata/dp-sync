# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Passwords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'service_account_password_id': 'str',
        'password_prefix': 'str',
        'password': 'str',
        'description': 'str',
        'created': 'datetime',
        'last_login': 'datetime'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'service_account_password_id': 'serviceAccountPasswordId',
        'password_prefix': 'passwordPrefix',
        'password': 'password',
        'description': 'description',
        'created': 'created',
        'last_login': 'lastLogin'
    }

    def __init__(self, sync_token=None, service_account_password_id=None, password_prefix=None, password=None, description=None, created=None, last_login=None):  # noqa: E501
        """Passwords - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._service_account_password_id = None
        self._password_prefix = None
        self._password = None
        self._description = None
        self._created = None
        self._last_login = None
        self.discriminator = None
        self.sync_token = sync_token
        self.service_account_password_id = service_account_password_id
        self.password_prefix = password_prefix
        if password is not None:
            self.password = password
        if description is not None:
            self.description = description
        self.created = created
        if last_login is not None:
            self.last_login = last_login

    @property
    def sync_token(self):
        """Gets the sync_token of this Passwords.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this Passwords.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this Passwords.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this Passwords.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def service_account_password_id(self):
        """Gets the service_account_password_id of this Passwords.  # noqa: E501

        Service account password ID (read only)  # noqa: E501

        :return: The service_account_password_id of this Passwords.  # noqa: E501
        :rtype: str
        """
        return self._service_account_password_id

    @service_account_password_id.setter
    def service_account_password_id(self, service_account_password_id):
        """Sets the service_account_password_id of this Passwords.

        Service account password ID (read only)  # noqa: E501

        :param service_account_password_id: The service_account_password_id of this Passwords.  # noqa: E501
        :type: str
        """
        if service_account_password_id is None:
            raise ValueError("Invalid value for `service_account_password_id`, must not be `None`")  # noqa: E501

        self._service_account_password_id = service_account_password_id

    @property
    def password_prefix(self):
        """Gets the password_prefix of this Passwords.  # noqa: E501

        Service account password prefix (read only)  # noqa: E501

        :return: The password_prefix of this Passwords.  # noqa: E501
        :rtype: str
        """
        return self._password_prefix

    @password_prefix.setter
    def password_prefix(self, password_prefix):
        """Sets the password_prefix of this Passwords.

        Service account password prefix (read only)  # noqa: E501

        :param password_prefix: The password_prefix of this Passwords.  # noqa: E501
        :type: str
        """
        if password_prefix is None:
            raise ValueError("Invalid value for `password_prefix`, must not be `None`")  # noqa: E501

        self._password_prefix = password_prefix

    @property
    def password(self):
        """Gets the password of this Passwords.  # noqa: E501

        Service account password (read only)  # noqa: E501

        :return: The password of this Passwords.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Passwords.

        Service account password (read only)  # noqa: E501

        :param password: The password of this Passwords.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def description(self):
        """Gets the description of this Passwords.  # noqa: E501

        Description (read only)  # noqa: E501

        :return: The description of this Passwords.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Passwords.

        Description (read only)  # noqa: E501

        :param description: The description of this Passwords.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created(self):
        """Gets the created of this Passwords.  # noqa: E501

        Creation time (read only)  # noqa: E501

        :return: The created of this Passwords.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Passwords.

        Creation time (read only)  # noqa: E501

        :param created: The created of this Passwords.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def last_login(self):
        """Gets the last_login of this Passwords.  # noqa: E501

        Last login time (read only)  # noqa: E501

        :return: The last_login of this Passwords.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Passwords.

        Last login time (read only)  # noqa: E501

        :param last_login: The last_login of this Passwords.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Passwords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Passwords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
