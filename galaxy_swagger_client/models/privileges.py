# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Privileges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grant_kind': 'str',
        'privilege': 'list[str]'
    }

    attribute_map = {
        'grant_kind': 'grantKind',
        'privilege': 'privilege'
    }

    def __init__(self, grant_kind=None, privilege=None):  # noqa: E501
        """Privileges - a model defined in Swagger"""  # noqa: E501
        self._grant_kind = None
        self._privilege = None
        self.discriminator = None
        self.grant_kind = grant_kind
        self.privilege = privilege

    @property
    def grant_kind(self):
        """Gets the grant_kind of this Privileges.  # noqa: E501

        Grant kind (read only)  # noqa: E501

        :return: The grant_kind of this Privileges.  # noqa: E501
        :rtype: str
        """
        return self._grant_kind

    @grant_kind.setter
    def grant_kind(self, grant_kind):
        """Sets the grant_kind of this Privileges.

        Grant kind (read only)  # noqa: E501

        :param grant_kind: The grant_kind of this Privileges.  # noqa: E501
        :type: str
        """
        if grant_kind is None:
            raise ValueError("Invalid value for `grant_kind`, must not be `None`")  # noqa: E501
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if grant_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(grant_kind, allowed_values)
            )

        self._grant_kind = grant_kind

    @property
    def privilege(self):
        """Gets the privilege of this Privileges.  # noqa: E501


        :return: The privilege of this Privileges.  # noqa: E501
        :rtype: list[str]
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege):
        """Sets the privilege of this Privileges.


        :param privilege: The privilege of this Privileges.  # noqa: E501
        :type: list[str]
        """
        if privilege is None:
            raise ValueError("Invalid value for `privilege`, must not be `None`")  # noqa: E501
        allowed_values = ["ManageSecurity", "CreateRole", "CreateUser", "CreateCluster", "CreateCatalog", "ViewAuditLog", "ManageBilling", "ManageNotifications", "ViewAllQueryHistory", "ManageSso", "SsoUserPasswordLogin", "ViewAllDataLineage", "UseCluster", "EnableDisableCluster", "MonitorCluster", "CreateSchema", "CreateTable", "Insert", "Delete", "Select", "Update", "ManageDataObservability", "CreateSql", "Execute", "ManageServiceAccount", "ManageServiceAccountToken", "ManageOauthClient", "ViewPublicOauthClient", "ManageAccountWork", "CreateTag", "ApplyTag", "ApplyTagInPath", "GenerativeAiFeatures", "ManageIngestStreams", "CreateFunction", "CancelQuery", "ViewDataProduct", "DownloadQueryResults", "ManageQueryRoutingRules"]  # noqa: E501
        if not set(privilege).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `privilege` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(privilege) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._privilege = privilege

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Privileges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Privileges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
