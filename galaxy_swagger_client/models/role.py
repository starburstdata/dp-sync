# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Role(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'role_id': 'str',
        'role_name': 'str',
        'role_description': 'str',
        'owning_role_id': 'str',
        'directly_granted_roles': 'list[DirectlyGrantedRoles]',
        'all_roles': 'list[DirectlyGrantedRoles]',
        'created_on': 'datetime',
        'modified_on': 'datetime'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'role_id': 'roleId',
        'role_name': 'roleName',
        'role_description': 'roleDescription',
        'owning_role_id': 'owningRoleId',
        'directly_granted_roles': 'directlyGrantedRoles',
        'all_roles': 'allRoles',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn'
    }

    def __init__(self, sync_token=None, role_id=None, role_name=None, role_description=None, owning_role_id=None, directly_granted_roles=None, all_roles=None, created_on=None, modified_on=None):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._role_id = None
        self._role_name = None
        self._role_description = None
        self._owning_role_id = None
        self._directly_granted_roles = None
        self._all_roles = None
        self._created_on = None
        self._modified_on = None
        self.discriminator = None
        self.sync_token = sync_token
        self.role_id = role_id
        self.role_name = role_name
        if role_description is not None:
            self.role_description = role_description
        if owning_role_id is not None:
            self.owning_role_id = owning_role_id
        self.directly_granted_roles = directly_granted_roles
        self.all_roles = all_roles
        self.created_on = created_on
        self.modified_on = modified_on

    @property
    def sync_token(self):
        """Gets the sync_token of this Role.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this Role.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this Role.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this Role.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def role_id(self):
        """Gets the role_id of this Role.  # noqa: E501

        Role ID (read only)  # noqa: E501

        :return: The role_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Role.

        Role ID (read only)  # noqa: E501

        :param role_id: The role_id of this Role.  # noqa: E501
        :type: str
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this Role.  # noqa: E501

        Role name (read only)  # noqa: E501

        :return: The role_name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this Role.

        Role name (read only)  # noqa: E501

        :param role_name: The role_name of this Role.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def role_description(self):
        """Gets the role_description of this Role.  # noqa: E501

        Role description (read only)  # noqa: E501

        :return: The role_description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_description

    @role_description.setter
    def role_description(self, role_description):
        """Sets the role_description of this Role.

        Role description (read only)  # noqa: E501

        :param role_description: The role_description of this Role.  # noqa: E501
        :type: str
        """

        self._role_description = role_description

    @property
    def owning_role_id(self):
        """Gets the owning_role_id of this Role.  # noqa: E501

        Owning role (read only)  # noqa: E501

        :return: The owning_role_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._owning_role_id

    @owning_role_id.setter
    def owning_role_id(self, owning_role_id):
        """Sets the owning_role_id of this Role.

        Owning role (read only)  # noqa: E501

        :param owning_role_id: The owning_role_id of this Role.  # noqa: E501
        :type: str
        """

        self._owning_role_id = owning_role_id

    @property
    def directly_granted_roles(self):
        """Gets the directly_granted_roles of this Role.  # noqa: E501


        :return: The directly_granted_roles of this Role.  # noqa: E501
        :rtype: list[DirectlyGrantedRoles]
        """
        return self._directly_granted_roles

    @directly_granted_roles.setter
    def directly_granted_roles(self, directly_granted_roles):
        """Sets the directly_granted_roles of this Role.


        :param directly_granted_roles: The directly_granted_roles of this Role.  # noqa: E501
        :type: list[DirectlyGrantedRoles]
        """
        if directly_granted_roles is None:
            raise ValueError("Invalid value for `directly_granted_roles`, must not be `None`")  # noqa: E501

        self._directly_granted_roles = directly_granted_roles

    @property
    def all_roles(self):
        """Gets the all_roles of this Role.  # noqa: E501


        :return: The all_roles of this Role.  # noqa: E501
        :rtype: list[DirectlyGrantedRoles]
        """
        return self._all_roles

    @all_roles.setter
    def all_roles(self, all_roles):
        """Sets the all_roles of this Role.


        :param all_roles: The all_roles of this Role.  # noqa: E501
        :type: list[DirectlyGrantedRoles]
        """
        if all_roles is None:
            raise ValueError("Invalid value for `all_roles`, must not be `None`")  # noqa: E501

        self._all_roles = all_roles

    @property
    def created_on(self):
        """Gets the created_on of this Role.  # noqa: E501

        Creation date (read only)  # noqa: E501

        :return: The created_on of this Role.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Role.

        Creation date (read only)  # noqa: E501

        :param created_on: The created_on of this Role.  # noqa: E501
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Role.  # noqa: E501

        Modified date (read only)  # noqa: E501

        :return: The modified_on of this Role.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Role.

        Modified date (read only)  # noqa: E501

        :param modified_on: The modified_on of this Role.  # noqa: E501
        :type: datetime
        """
        if modified_on is None:
            raise ValueError("Invalid value for `modified_on`, must not be `None`")  # noqa: E501

        self._modified_on = modified_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
