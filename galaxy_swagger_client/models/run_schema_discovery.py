# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RunSchemaDiscovery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'default_schema_name': 'str',
        'options': 'dict(str, str)',
        'skip_applying': 'bool',
        'force_full_discovery': 'bool'
    }

    attribute_map = {
        'uri': 'uri',
        'default_schema_name': 'defaultSchemaName',
        'options': 'options',
        'skip_applying': 'skipApplying',
        'force_full_discovery': 'forceFullDiscovery'
    }

    def __init__(self, uri=None, default_schema_name=None, options=None, skip_applying=None, force_full_discovery=None):  # noqa: E501
        """RunSchemaDiscovery - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._default_schema_name = None
        self._options = None
        self._skip_applying = None
        self._force_full_discovery = None
        self.discriminator = None
        self.uri = uri
        if default_schema_name is not None:
            self.default_schema_name = default_schema_name
        self.options = options
        self.skip_applying = skip_applying
        self.force_full_discovery = force_full_discovery

    @property
    def uri(self):
        """Gets the uri of this RunSchemaDiscovery.  # noqa: E501

        Root uri, that schema discovery will start from. Current role must have location security correctly set up. (read only)  # noqa: E501

        :return: The uri of this RunSchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RunSchemaDiscovery.

        Root uri, that schema discovery will start from. Current role must have location security correctly set up. (read only)  # noqa: E501

        :param uri: The uri of this RunSchemaDiscovery.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def default_schema_name(self):
        """Gets the default_schema_name of this RunSchemaDiscovery.  # noqa: E501

        Schema name that will be used for top-level tables, which aren't under any schema (read only)  # noqa: E501

        :return: The default_schema_name of this RunSchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._default_schema_name

    @default_schema_name.setter
    def default_schema_name(self, default_schema_name):
        """Sets the default_schema_name of this RunSchemaDiscovery.

        Schema name that will be used for top-level tables, which aren't under any schema (read only)  # noqa: E501

        :param default_schema_name: The default_schema_name of this RunSchemaDiscovery.  # noqa: E501
        :type: str
        """

        self._default_schema_name = default_schema_name

    @property
    def options(self):
        """Gets the options of this RunSchemaDiscovery.  # noqa: E501


        :return: The options of this RunSchemaDiscovery.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RunSchemaDiscovery.


        :param options: The options of this RunSchemaDiscovery.  # noqa: E501
        :type: dict(str, str)
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def skip_applying(self):
        """Gets the skip_applying of this RunSchemaDiscovery.  # noqa: E501

        Do not apply schema discovery results to catalog, useful if tables needs to be inspected manually before running SQLs (read only)  # noqa: E501

        :return: The skip_applying of this RunSchemaDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._skip_applying

    @skip_applying.setter
    def skip_applying(self, skip_applying):
        """Sets the skip_applying of this RunSchemaDiscovery.

        Do not apply schema discovery results to catalog, useful if tables needs to be inspected manually before running SQLs (read only)  # noqa: E501

        :param skip_applying: The skip_applying of this RunSchemaDiscovery.  # noqa: E501
        :type: bool
        """
        if skip_applying is None:
            raise ValueError("Invalid value for `skip_applying`, must not be `None`")  # noqa: E501

        self._skip_applying = skip_applying

    @property
    def force_full_discovery(self):
        """Gets the force_full_discovery of this RunSchemaDiscovery.  # noqa: E501

        Always run full discovery, disregarding any previous discoveries under same `uri` (read only)  # noqa: E501

        :return: The force_full_discovery of this RunSchemaDiscovery.  # noqa: E501
        :rtype: bool
        """
        return self._force_full_discovery

    @force_full_discovery.setter
    def force_full_discovery(self, force_full_discovery):
        """Sets the force_full_discovery of this RunSchemaDiscovery.

        Always run full discovery, disregarding any previous discoveries under same `uri` (read only)  # noqa: E501

        :param force_full_discovery: The force_full_discovery of this RunSchemaDiscovery.  # noqa: E501
        :type: bool
        """
        if force_full_discovery is None:
            raise ValueError("Invalid value for `force_full_discovery`, must not be `None`")  # noqa: E501

        self._force_full_discovery = force_full_discovery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunSchemaDiscovery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSchemaDiscovery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
