# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaDiscovery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sync_token': 'str',
        'schema_discovery_id': 'str',
        'catalog_id': 'str',
        'created_at': 'datetime',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'uri': 'str',
        'default_schema_name': 'str',
        'status': 'str',
        'based_on_schema_discovery_id': 'str',
        'errors': 'list[str]',
        'options': 'dict(str, str)',
        'discovered_sql_statement': 'list[DiscoveredSqlStatement]',
        'created_tables_count': 'int',
        'updated_tables_count': 'int',
        'deleted_tables_count': 'int'
    }

    attribute_map = {
        'sync_token': 'syncToken',
        'schema_discovery_id': 'schemaDiscoveryId',
        'catalog_id': 'catalogId',
        'created_at': 'createdAt',
        'started_at': 'startedAt',
        'finished_at': 'finishedAt',
        'uri': 'uri',
        'default_schema_name': 'defaultSchemaName',
        'status': 'status',
        'based_on_schema_discovery_id': 'basedOnSchemaDiscoveryId',
        'errors': 'errors',
        'options': 'options',
        'discovered_sql_statement': 'discoveredSqlStatement',
        'created_tables_count': 'createdTablesCount',
        'updated_tables_count': 'updatedTablesCount',
        'deleted_tables_count': 'deletedTablesCount'
    }

    def __init__(self, sync_token=None, schema_discovery_id=None, catalog_id=None, created_at=None, started_at=None, finished_at=None, uri=None, default_schema_name=None, status=None, based_on_schema_discovery_id=None, errors=None, options=None, discovered_sql_statement=None, created_tables_count=None, updated_tables_count=None, deleted_tables_count=None):  # noqa: E501
        """SchemaDiscovery - a model defined in Swagger"""  # noqa: E501
        self._sync_token = None
        self._schema_discovery_id = None
        self._catalog_id = None
        self._created_at = None
        self._started_at = None
        self._finished_at = None
        self._uri = None
        self._default_schema_name = None
        self._status = None
        self._based_on_schema_discovery_id = None
        self._errors = None
        self._options = None
        self._discovered_sql_statement = None
        self._created_tables_count = None
        self._updated_tables_count = None
        self._deleted_tables_count = None
        self.discriminator = None
        self.sync_token = sync_token
        self.schema_discovery_id = schema_discovery_id
        self.catalog_id = catalog_id
        self.created_at = created_at
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        self.uri = uri
        self.default_schema_name = default_schema_name
        self.status = status
        if based_on_schema_discovery_id is not None:
            self.based_on_schema_discovery_id = based_on_schema_discovery_id
        self.errors = errors
        self.options = options
        self.discovered_sql_statement = discovered_sql_statement
        self.created_tables_count = created_tables_count
        self.updated_tables_count = updated_tables_count
        self.deleted_tables_count = deleted_tables_count

    @property
    def sync_token(self):
        """Gets the sync_token of this SchemaDiscovery.  # noqa: E501

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :return: The sync_token of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this SchemaDiscovery.

        Used to ensure consistency for resource updates. A syncToken that is returned from the server is valid until the resource is updated when a new syncToken will be generated. Only the latest version of the object is maintained.  (read only)  # noqa: E501

        :param sync_token: The sync_token of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if sync_token is None:
            raise ValueError("Invalid value for `sync_token`, must not be `None`")  # noqa: E501

        self._sync_token = sync_token

    @property
    def schema_discovery_id(self):
        """Gets the schema_discovery_id of this SchemaDiscovery.  # noqa: E501

        Schema discovery ID (read only)  # noqa: E501

        :return: The schema_discovery_id of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._schema_discovery_id

    @schema_discovery_id.setter
    def schema_discovery_id(self, schema_discovery_id):
        """Sets the schema_discovery_id of this SchemaDiscovery.

        Schema discovery ID (read only)  # noqa: E501

        :param schema_discovery_id: The schema_discovery_id of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if schema_discovery_id is None:
            raise ValueError("Invalid value for `schema_discovery_id`, must not be `None`")  # noqa: E501

        self._schema_discovery_id = schema_discovery_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this SchemaDiscovery.  # noqa: E501

        Catalog ID (read only)  # noqa: E501

        :return: The catalog_id of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this SchemaDiscovery.

        Catalog ID (read only)  # noqa: E501

        :param catalog_id: The catalog_id of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501

        self._catalog_id = catalog_id

    @property
    def created_at(self):
        """Gets the created_at of this SchemaDiscovery.  # noqa: E501

        Time when schema discovery was created (read only)  # noqa: E501

        :return: The created_at of this SchemaDiscovery.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SchemaDiscovery.

        Time when schema discovery was created (read only)  # noqa: E501

        :param created_at: The created_at of this SchemaDiscovery.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def started_at(self):
        """Gets the started_at of this SchemaDiscovery.  # noqa: E501

        Time when schema discovery has started (read only)  # noqa: E501

        :return: The started_at of this SchemaDiscovery.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this SchemaDiscovery.

        Time when schema discovery has started (read only)  # noqa: E501

        :param started_at: The started_at of this SchemaDiscovery.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this SchemaDiscovery.  # noqa: E501

        Time when schema discovery has finished (read only)  # noqa: E501

        :return: The finished_at of this SchemaDiscovery.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this SchemaDiscovery.

        Time when schema discovery has finished (read only)  # noqa: E501

        :param finished_at: The finished_at of this SchemaDiscovery.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def uri(self):
        """Gets the uri of this SchemaDiscovery.  # noqa: E501

        Root location for schema discovery (read only)  # noqa: E501

        :return: The uri of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SchemaDiscovery.

        Root location for schema discovery (read only)  # noqa: E501

        :param uri: The uri of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def default_schema_name(self):
        """Gets the default_schema_name of this SchemaDiscovery.  # noqa: E501

        Default schema name, used when tables without schemas were discovered (read only)  # noqa: E501

        :return: The default_schema_name of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._default_schema_name

    @default_schema_name.setter
    def default_schema_name(self, default_schema_name):
        """Sets the default_schema_name of this SchemaDiscovery.

        Default schema name, used when tables without schemas were discovered (read only)  # noqa: E501

        :param default_schema_name: The default_schema_name of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if default_schema_name is None:
            raise ValueError("Invalid value for `default_schema_name`, must not be `None`")  # noqa: E501

        self._default_schema_name = default_schema_name

    @property
    def status(self):
        """Gets the status of this SchemaDiscovery.  # noqa: E501

        Status of schema discovery (read only)  # noqa: E501

        :return: The status of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SchemaDiscovery.

        Status of schema discovery (read only)  # noqa: E501

        :param status: The status of this SchemaDiscovery.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Scheduled", "Running", "Errored", "Success", "RescanScheduled", "RescanRunning", "ApplyScheduled", "ApplyRunning", "ApplyErrored", "ApplySuccess", "Deprecated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def based_on_schema_discovery_id(self):
        """Gets the based_on_schema_discovery_id of this SchemaDiscovery.  # noqa: E501

        ID of schema discovery which this one is based on, in case of diff runs (read only)  # noqa: E501

        :return: The based_on_schema_discovery_id of this SchemaDiscovery.  # noqa: E501
        :rtype: str
        """
        return self._based_on_schema_discovery_id

    @based_on_schema_discovery_id.setter
    def based_on_schema_discovery_id(self, based_on_schema_discovery_id):
        """Sets the based_on_schema_discovery_id of this SchemaDiscovery.

        ID of schema discovery which this one is based on, in case of diff runs (read only)  # noqa: E501

        :param based_on_schema_discovery_id: The based_on_schema_discovery_id of this SchemaDiscovery.  # noqa: E501
        :type: str
        """

        self._based_on_schema_discovery_id = based_on_schema_discovery_id

    @property
    def errors(self):
        """Gets the errors of this SchemaDiscovery.  # noqa: E501


        :return: The errors of this SchemaDiscovery.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SchemaDiscovery.


        :param errors: The errors of this SchemaDiscovery.  # noqa: E501
        :type: list[str]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def options(self):
        """Gets the options of this SchemaDiscovery.  # noqa: E501


        :return: The options of this SchemaDiscovery.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SchemaDiscovery.


        :param options: The options of this SchemaDiscovery.  # noqa: E501
        :type: dict(str, str)
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def discovered_sql_statement(self):
        """Gets the discovered_sql_statement of this SchemaDiscovery.  # noqa: E501


        :return: The discovered_sql_statement of this SchemaDiscovery.  # noqa: E501
        :rtype: list[DiscoveredSqlStatement]
        """
        return self._discovered_sql_statement

    @discovered_sql_statement.setter
    def discovered_sql_statement(self, discovered_sql_statement):
        """Sets the discovered_sql_statement of this SchemaDiscovery.


        :param discovered_sql_statement: The discovered_sql_statement of this SchemaDiscovery.  # noqa: E501
        :type: list[DiscoveredSqlStatement]
        """
        if discovered_sql_statement is None:
            raise ValueError("Invalid value for `discovered_sql_statement`, must not be `None`")  # noqa: E501

        self._discovered_sql_statement = discovered_sql_statement

    @property
    def created_tables_count(self):
        """Gets the created_tables_count of this SchemaDiscovery.  # noqa: E501

        Number of tables to create (read only)  # noqa: E501

        :return: The created_tables_count of this SchemaDiscovery.  # noqa: E501
        :rtype: int
        """
        return self._created_tables_count

    @created_tables_count.setter
    def created_tables_count(self, created_tables_count):
        """Sets the created_tables_count of this SchemaDiscovery.

        Number of tables to create (read only)  # noqa: E501

        :param created_tables_count: The created_tables_count of this SchemaDiscovery.  # noqa: E501
        :type: int
        """
        if created_tables_count is None:
            raise ValueError("Invalid value for `created_tables_count`, must not be `None`")  # noqa: E501

        self._created_tables_count = created_tables_count

    @property
    def updated_tables_count(self):
        """Gets the updated_tables_count of this SchemaDiscovery.  # noqa: E501

        Number of tables to update (read only)  # noqa: E501

        :return: The updated_tables_count of this SchemaDiscovery.  # noqa: E501
        :rtype: int
        """
        return self._updated_tables_count

    @updated_tables_count.setter
    def updated_tables_count(self, updated_tables_count):
        """Sets the updated_tables_count of this SchemaDiscovery.

        Number of tables to update (read only)  # noqa: E501

        :param updated_tables_count: The updated_tables_count of this SchemaDiscovery.  # noqa: E501
        :type: int
        """
        if updated_tables_count is None:
            raise ValueError("Invalid value for `updated_tables_count`, must not be `None`")  # noqa: E501

        self._updated_tables_count = updated_tables_count

    @property
    def deleted_tables_count(self):
        """Gets the deleted_tables_count of this SchemaDiscovery.  # noqa: E501

        Number of tables to delete (read only)  # noqa: E501

        :return: The deleted_tables_count of this SchemaDiscovery.  # noqa: E501
        :rtype: int
        """
        return self._deleted_tables_count

    @deleted_tables_count.setter
    def deleted_tables_count(self, deleted_tables_count):
        """Sets the deleted_tables_count of this SchemaDiscovery.

        Number of tables to delete (read only)  # noqa: E501

        :param deleted_tables_count: The deleted_tables_count of this SchemaDiscovery.  # noqa: E501
        :type: int
        """
        if deleted_tables_count is None:
            raise ValueError("Invalid value for `deleted_tables_count`, must not be `None`")  # noqa: E501

        self._deleted_tables_count = deleted_tables_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaDiscovery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaDiscovery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
