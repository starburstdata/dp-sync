# coding: utf-8

"""
    Starburst Galaxy Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePolicyPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'predicate': 'str',
        'description': 'str',
        'expiration': 'datetime',
        'scopes': 'list[ScopesPatch]'
    }

    attribute_map = {
        'name': 'name',
        'predicate': 'predicate',
        'description': 'description',
        'expiration': 'expiration',
        'scopes': 'scopes'
    }

    def __init__(self, name=None, predicate=None, description=None, expiration=None, scopes=None):  # noqa: E501
        """UpdatePolicyPatch - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._predicate = None
        self._description = None
        self._expiration = None
        self._scopes = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if predicate is not None:
            self.predicate = predicate
        if description is not None:
            self.description = description
        if expiration is not None:
            self.expiration = expiration
        if scopes is not None:
            self.scopes = scopes

    @property
    def name(self):
        """Gets the name of this UpdatePolicyPatch.  # noqa: E501

        Policy name  # noqa: E501

        :return: The name of this UpdatePolicyPatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePolicyPatch.

        Policy name  # noqa: E501

        :param name: The name of this UpdatePolicyPatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def predicate(self):
        """Gets the predicate of this UpdatePolicyPatch.  # noqa: E501

        Policy predicate  # noqa: E501

        :return: The predicate of this UpdatePolicyPatch.  # noqa: E501
        :rtype: str
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this UpdatePolicyPatch.

        Policy predicate  # noqa: E501

        :param predicate: The predicate of this UpdatePolicyPatch.  # noqa: E501
        :type: str
        """

        self._predicate = predicate

    @property
    def description(self):
        """Gets the description of this UpdatePolicyPatch.  # noqa: E501

        Policy description  # noqa: E501

        :return: The description of this UpdatePolicyPatch.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePolicyPatch.

        Policy description  # noqa: E501

        :param description: The description of this UpdatePolicyPatch.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiration(self):
        """Gets the expiration of this UpdatePolicyPatch.  # noqa: E501

        Policy expiration  # noqa: E501

        :return: The expiration of this UpdatePolicyPatch.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UpdatePolicyPatch.

        Policy expiration  # noqa: E501

        :param expiration: The expiration of this UpdatePolicyPatch.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def scopes(self):
        """Gets the scopes of this UpdatePolicyPatch.  # noqa: E501


        :return: The scopes of this UpdatePolicyPatch.  # noqa: E501
        :rtype: list[ScopesPatch]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this UpdatePolicyPatch.


        :param scopes: The scopes of this UpdatePolicyPatch.  # noqa: E501
        :type: list[ScopesPatch]
        """

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePolicyPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePolicyPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
