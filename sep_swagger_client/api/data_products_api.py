# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sep_swagger_client.api_client import ApiClient


class DataProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clone_data_product(self, data_product_id, **kwargs):  # noqa: E501
        """Clone a data product  # noqa: E501

        Clone an existing data product within the same domain.  All datasets are cloned as well as tags and sample queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_data_product(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param CloneDataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clone_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clone_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def clone_data_product_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Clone a data product  # noqa: E501

        Clone an existing data product within the same domain.  All datasets are cloned as well as tags and sample queries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_data_product_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param CloneDataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_data_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `clone_data_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_data_product(self, **kwargs):  # noqa: E501
        """Create a data product  # noqa: E501

        This request creates a data product in a DRAFT status. At this stage the data product's schema and datasets are not yet available to be queried in SEP. It is only available for querying after it gets published, as part of the publishing workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_product(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_data_product_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_data_product_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_data_product_with_http_info(self, **kwargs):  # noqa: E501
        """Create a data product  # noqa: E501

        This request creates a data product in a DRAFT status. At this stage the data product's schema and datasets are not yet available to be queried in SEP. It is only available for querying after it gets published, as part of the publishing workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_product_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_data_product" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_product(self, data_product_id, **kwargs):  # noqa: E501
        """Get a data product by identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_product(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def get_data_product_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Get a data product by identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_product_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `get_data_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_materialized_view_refresh_metadata(self, data_product_id, view_name, **kwargs):  # noqa: E501
        """Get refresh meta data about a materialized view that belongs to a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_materialized_view_refresh_metadata(data_product_id, view_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param str view_name: (required)
        :return: MaterializedViewRefreshMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_materialized_view_refresh_metadata_with_http_info(data_product_id, view_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_materialized_view_refresh_metadata_with_http_info(data_product_id, view_name, **kwargs)  # noqa: E501
            return data

    def get_materialized_view_refresh_metadata_with_http_info(self, data_product_id, view_name, **kwargs):  # noqa: E501
        """Get refresh meta data about a materialized view that belongs to a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_materialized_view_refresh_metadata_with_http_info(data_product_id, view_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param str view_name: (required)
        :return: MaterializedViewRefreshMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'view_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_materialized_view_refresh_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `get_materialized_view_refresh_metadata`")  # noqa: E501
        # verify the required parameter 'view_name' is set
        if ('view_name' not in params or
                params['view_name'] is None):
            raise ValueError("Missing the required parameter `view_name` when calling `get_materialized_view_refresh_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501
        if 'view_name' in params:
            path_params['viewName'] = params['view_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/materializedViews/{viewName}/refreshMetadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaterializedViewRefreshMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_open_api(self, **kwargs):  # noqa: E501
        """Return the OpenAPI specification for the Data Product API.  Use Accept header of 'application/yaml' to request a YAML response instead of JSON.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_open_api(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_open_api_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_open_api_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_open_api_with_http_info(self, **kwargs):  # noqa: E501
        """Return the OpenAPI specification for the Data Product API.  Use Accept header of 'application/yaml' to request a YAML response instead of JSON.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_open_api_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_open_api" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/openApi', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_catalogs(self, **kwargs):  # noqa: E501
        """Return all catalogs suitable to store data products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_catalogs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CatalogDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_target_catalogs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_target_catalogs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_target_catalogs_with_http_info(self, **kwargs):  # noqa: E501
        """Return all catalogs suitable to store data products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_catalogs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CatalogDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_catalogs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/catalogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CatalogDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sample_queries(self, data_product_id, **kwargs):  # noqa: E501
        """Get the sample queries for a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sample_queries(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :return: list[SampleQuery]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sample_queries_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_sample_queries_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def list_sample_queries_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Get the sample queries for a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sample_queries_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :return: list[SampleQuery]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sample_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `list_sample_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/sampleQueries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SampleQuery]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reassign_domain_for_data_products(self, **kwargs):  # noqa: E501
        """Reassign the domain for a list of data products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reassign_domain_for_data_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainReassignmentRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reassign_domain_for_data_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reassign_domain_for_data_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def reassign_domain_for_data_products_with_http_info(self, **kwargs):  # noqa: E501
        """Reassign the domain for a list of data products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reassign_domain_for_data_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainReassignmentRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reassign_domain_for_data_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/reassignDomain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_data_products(self, **kwargs):  # noqa: E501
        """Search for data products according to the searchOptions request parameter.  # noqa: E501

        This endpoint returns the first 100 data products matching the given searchOptions parameter. The number of results can be configured in the limit attribute of the searchOptions, up to a maximum of 1000.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_data_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchOptionsParam search_options:
        :return: list[DataProductSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_data_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_data_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_data_products_with_http_info(self, **kwargs):  # noqa: E501
        """Search for data products according to the searchOptions request parameter.  # noqa: E501

        This endpoint returns the first 100 data products matching the given searchOptions parameter. The number of results can be configured in the limit attribute of the searchOptions, up to a maximum of 1000.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_data_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchOptionsParam search_options:
        :return: list[DataProductSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_data_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_options' in params:
            query_params.append(('searchOptions', params['search_options']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataProductSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_data_product(self, data_product_id, **kwargs):  # noqa: E501
        """Update a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_data_product(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param DataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def update_data_product_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Update a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_data_product_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param DataProductPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_data_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `update_data_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_materialized_view_in_data_product(self, data_product_id, **kwargs):  # noqa: E501
        """Create/Update a materialized view in data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_materialized_view_in_data_product(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param MaterializedViewDatasetPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_materialized_view_in_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_materialized_view_in_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def update_materialized_view_in_data_product_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Create/Update a materialized view in data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_materialized_view_in_data_product_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param MaterializedViewDatasetPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_materialized_view_in_data_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `update_materialized_view_in_data_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/materializedViews', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sample_queries(self, data_product_id, **kwargs):  # noqa: E501
        """Update sample queries for a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sample_queries(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param list[SampleQuery] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sample_queries_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sample_queries_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def update_sample_queries_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Update sample queries for a data product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sample_queries_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param list[SampleQuery] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sample_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `update_sample_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/sampleQueries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_view_in_data_product(self, data_product_id, **kwargs):  # noqa: E501
        """Create/Updates a view in a DataProducts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_view_in_data_product(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param ViewDatasetPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_view_in_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_view_in_data_product_with_http_info(data_product_id, **kwargs)  # noqa: E501
            return data

    def update_view_in_data_product_with_http_info(self, data_product_id, **kwargs):  # noqa: E501
        """Create/Updates a view in a DataProducts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_view_in_data_product_with_http_info(data_product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_product_id: (required)
        :param ViewDatasetPayload body:
        :return: DataProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_view_in_data_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_product_id' is set
        if ('data_product_id' not in params or
                params['data_product_id'] is None):
            raise ValueError("Missing the required parameter `data_product_id` when calling `update_view_in_data_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_product_id' in params:
            path_params['dataProductId'] = params['data_product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dataProduct/products/{dataProductId}/views', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
