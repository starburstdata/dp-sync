# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sep_swagger_client.api_client import ApiClient


class GrantsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_grant(self, role_id, **kwargs):  # noqa: E501
        """Create a Starburst built-in access control grant for a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_grant(role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param CreateGrantPayload body:
        :return: GrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_grant_with_http_info(role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_grant_with_http_info(role_id, **kwargs)  # noqa: E501
            return data

    def create_grant_with_http_info(self, role_id, **kwargs):  # noqa: E501
        """Create a Starburst built-in access control grant for a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_grant_with_http_info(role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param CreateGrantPayload body:
        :return: GrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_grant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `create_grant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/biac/roles/{roleId}/grants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_grant(self, role_id, grant_id, **kwargs):  # noqa: E501
        """Delete a Starburst built-in access control grant of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grant(role_id, grant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param int grant_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_grant_with_http_info(role_id, grant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_grant_with_http_info(role_id, grant_id, **kwargs)  # noqa: E501
            return data

    def delete_grant_with_http_info(self, role_id, grant_id, **kwargs):  # noqa: E501
        """Delete a Starburst built-in access control grant of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grant_with_http_info(role_id, grant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param int grant_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'grant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_grant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `delete_grant`")  # noqa: E501
        # verify the required parameter 'grant_id' is set
        if ('grant_id' not in params or
                params['grant_id'] is None):
            raise ValueError("Missing the required parameter `grant_id` when calling `delete_grant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501
        if 'grant_id' in params:
            path_params['grantId'] = params['grant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/biac/roles/{roleId}/grants/{grantId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_grant(self, role_id, grant_id, **kwargs):  # noqa: E501
        """Get a Starburst built-in access control grant of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grant(role_id, grant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param int grant_id: (required)
        :return: GrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_grant_with_http_info(role_id, grant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_grant_with_http_info(role_id, grant_id, **kwargs)  # noqa: E501
            return data

    def get_grant_with_http_info(self, role_id, grant_id, **kwargs):  # noqa: E501
        """Get a Starburst built-in access control grant of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grant_with_http_info(role_id, grant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param int grant_id: (required)
        :return: GrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'grant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `get_grant`")  # noqa: E501
        # verify the required parameter 'grant_id' is set
        if ('grant_id' not in params or
                params['grant_id'] is None):
            raise ValueError("Missing the required parameter `grant_id` when calling `get_grant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501
        if 'grant_id' in params:
            path_params['grantId'] = params['grant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/biac/roles/{roleId}/grants/{grantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grants(self, role_id, **kwargs):  # noqa: E501
        """List Starburst built-in access control grants of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grants(role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param str page_token: Page token
        :param str page_size: Page size
        :param str page_sort: Sorting order
        :return: PaginatedResultGrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grants_with_http_info(role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grants_with_http_info(role_id, **kwargs)  # noqa: E501
            return data

    def list_grants_with_http_info(self, role_id, **kwargs):  # noqa: E501
        """List Starburst built-in access control grants of a role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grants_with_http_info(role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int role_id: (required)
        :param str page_token: Page token
        :param str page_size: Page size
        :param str page_sort: Sorting order
        :return: PaginatedResultGrantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'page_token', 'page_size', 'page_sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `list_grants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501

        query_params = []
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_sort' in params:
            query_params.append(('pageSort', params['page_sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/biac/roles/{roleId}/grants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResultGrantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
