# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_queried_at': 'datetime',
        'last_queried_by': 'str'
    }

    attribute_map = {
        'last_queried_at': 'lastQueriedAt',
        'last_queried_by': 'lastQueriedBy'
    }

    def __init__(self, last_queried_at=None, last_queried_by=None):  # noqa: E501
        """AccessMetadata - a model defined in Swagger"""  # noqa: E501
        self._last_queried_at = None
        self._last_queried_by = None
        self.discriminator = None
        if last_queried_at is not None:
            self.last_queried_at = last_queried_at
        if last_queried_by is not None:
            self.last_queried_by = last_queried_by

    @property
    def last_queried_at(self):
        """Gets the last_queried_at of this AccessMetadata.  # noqa: E501

        Timestamp when this data product was last queried  # noqa: E501

        :return: The last_queried_at of this AccessMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_queried_at

    @last_queried_at.setter
    def last_queried_at(self, last_queried_at):
        """Sets the last_queried_at of this AccessMetadata.

        Timestamp when this data product was last queried  # noqa: E501

        :param last_queried_at: The last_queried_at of this AccessMetadata.  # noqa: E501
        :type: datetime
        """

        self._last_queried_at = last_queried_at

    @property
    def last_queried_by(self):
        """Gets the last_queried_by of this AccessMetadata.  # noqa: E501

        User who last queried this data product  # noqa: E501

        :return: The last_queried_by of this AccessMetadata.  # noqa: E501
        :rtype: str
        """
        return self._last_queried_by

    @last_queried_by.setter
    def last_queried_by(self, last_queried_by):
        """Sets the last_queried_by of this AccessMetadata.

        User who last queried this data product  # noqa: E501

        :param last_queried_by: The last_queried_by of this AccessMetadata.  # noqa: E501
        :type: str
        """

        self._last_queried_by = last_queried_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
