# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'ErrorCode',
        'message': 'str',
        'details_type': 'str',
        'details': 'ErrorDetailType'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'message': 'message',
        'details_type': 'detailsType',
        'details': 'details'
    }

    def __init__(self, error_code=None, message=None, details_type=None, details=None):  # noqa: E501
        """ApiError - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._message = None
        self._details_type = None
        self._details = None
        self.discriminator = None
        if error_code is not None:
            self.error_code = error_code
        if message is not None:
            self.message = message
        if details_type is not None:
            self.details_type = details_type
        if details is not None:
            self.details = details

    @property
    def error_code(self):
        """Gets the error_code of this ApiError.  # noqa: E501


        :return: The error_code of this ApiError.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ApiError.


        :param error_code: The error_code of this ApiError.  # noqa: E501
        :type: ErrorCode
        """

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this ApiError.  # noqa: E501


        :return: The message of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiError.


        :param message: The message of this ApiError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def details_type(self):
        """Gets the details_type of this ApiError.  # noqa: E501


        :return: The details_type of this ApiError.  # noqa: E501
        :rtype: str
        """
        return self._details_type

    @details_type.setter
    def details_type(self, details_type):
        """Sets the details_type of this ApiError.


        :param details_type: The details_type of this ApiError.  # noqa: E501
        :type: str
        """

        self._details_type = details_type

    @property
    def details(self):
        """Gets the details of this ApiError.  # noqa: E501


        :return: The details of this ApiError.  # noqa: E501
        :rtype: ErrorDetailType
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ApiError.


        :param details: The details of this ApiError.  # noqa: E501
        :type: ErrorDetailType
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
