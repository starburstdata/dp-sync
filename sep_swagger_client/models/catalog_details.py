# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CatalogDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog_name': 'str',
        'connector_name': 'str',
        'is_materialized_view_enabled': 'bool'
    }

    attribute_map = {
        'catalog_name': 'catalogName',
        'connector_name': 'connectorName',
        'is_materialized_view_enabled': 'isMaterializedViewEnabled'
    }

    def __init__(self, catalog_name=None, connector_name=None, is_materialized_view_enabled=None):  # noqa: E501
        """CatalogDetails - a model defined in Swagger"""  # noqa: E501
        self._catalog_name = None
        self._connector_name = None
        self._is_materialized_view_enabled = None
        self.discriminator = None
        self.catalog_name = catalog_name
        self.connector_name = connector_name
        self.is_materialized_view_enabled = is_materialized_view_enabled

    @property
    def catalog_name(self):
        """Gets the catalog_name of this CatalogDetails.  # noqa: E501

        Name of the catalog.  # noqa: E501

        :return: The catalog_name of this CatalogDetails.  # noqa: E501
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """Sets the catalog_name of this CatalogDetails.

        Name of the catalog.  # noqa: E501

        :param catalog_name: The catalog_name of this CatalogDetails.  # noqa: E501
        :type: str
        """
        if catalog_name is None:
            raise ValueError("Invalid value for `catalog_name`, must not be `None`")  # noqa: E501

        self._catalog_name = catalog_name

    @property
    def connector_name(self):
        """Gets the connector_name of this CatalogDetails.  # noqa: E501

        Name of the connector for this catalog.  # noqa: E501

        :return: The connector_name of this CatalogDetails.  # noqa: E501
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this CatalogDetails.

        Name of the connector for this catalog.  # noqa: E501

        :param connector_name: The connector_name of this CatalogDetails.  # noqa: E501
        :type: str
        """
        if connector_name is None:
            raise ValueError("Invalid value for `connector_name`, must not be `None`")  # noqa: E501

        self._connector_name = connector_name

    @property
    def is_materialized_view_enabled(self):
        """Gets the is_materialized_view_enabled of this CatalogDetails.  # noqa: E501

        Whether materialized views are enabled or not for this catalog.  # noqa: E501

        :return: The is_materialized_view_enabled of this CatalogDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_materialized_view_enabled

    @is_materialized_view_enabled.setter
    def is_materialized_view_enabled(self, is_materialized_view_enabled):
        """Sets the is_materialized_view_enabled of this CatalogDetails.

        Whether materialized views are enabled or not for this catalog.  # noqa: E501

        :param is_materialized_view_enabled: The is_materialized_view_enabled of this CatalogDetails.  # noqa: E501
        :type: bool
        """
        if is_materialized_view_enabled is None:
            raise ValueError("Invalid value for `is_materialized_view_enabled`, must not be `None`")  # noqa: E501

        self._is_materialized_view_enabled = is_materialized_view_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
