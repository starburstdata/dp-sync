# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from sep_swagger_client.models.entity_model import EntityModel  # noqa: F401,E501

class CatalogKeyEntityData(EntityModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog': 'str',
        'entity_key': 'str'
    }
    if hasattr(EntityModel, "swagger_types"):
        swagger_types.update(EntityModel.swagger_types)

    attribute_map = {
        'catalog': 'catalog',
        'entity_key': 'entityKey'
    }
    if hasattr(EntityModel, "attribute_map"):
        attribute_map.update(EntityModel.attribute_map)

    def __init__(self, catalog=None, entity_key=None, *args, **kwargs):  # noqa: E501
        """CatalogKeyEntityData - a model defined in Swagger"""  # noqa: E501
        self._catalog = None
        self._entity_key = None
        self.discriminator = None
        if catalog is not None:
            self.catalog = catalog
        if entity_key is not None:
            self.entity_key = entity_key
        EntityModel.__init__(self, *args, **kwargs)

    @property
    def catalog(self):
        """Gets the catalog of this CatalogKeyEntityData.  # noqa: E501

        If empty it applies to all catalogs  # noqa: E501

        :return: The catalog of this CatalogKeyEntityData.  # noqa: E501
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this CatalogKeyEntityData.

        If empty it applies to all catalogs  # noqa: E501

        :param catalog: The catalog of this CatalogKeyEntityData.  # noqa: E501
        :type: str
        """

        self._catalog = catalog

    @property
    def entity_key(self):
        """Gets the entity_key of this CatalogKeyEntityData.  # noqa: E501

        If empty it applies to all entities of the given category in the entity's catalog  # noqa: E501

        :return: The entity_key of this CatalogKeyEntityData.  # noqa: E501
        :rtype: str
        """
        return self._entity_key

    @entity_key.setter
    def entity_key(self, entity_key):
        """Sets the entity_key of this CatalogKeyEntityData.

        If empty it applies to all entities of the given category in the entity's catalog  # noqa: E501

        :param entity_key: The entity_key of this CatalogKeyEntityData.  # noqa: E501
        :type: str
        """

        self._entity_key = entity_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogKeyEntityData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogKeyEntityData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
