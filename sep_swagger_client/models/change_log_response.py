# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeLogResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'query_id': 'str',
        'operation': 'str',
        'entity_kind': 'str',
        'what_changed': 'str',
        'entity': 'str',
        'entity_specified': 'bool',
        'grant_option': 'bool',
        'affected_role': 'str',
        'user': 'str',
        'enabled_roles': 'list[str]',
        'at_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'query_id': 'queryId',
        'operation': 'operation',
        'entity_kind': 'entityKind',
        'what_changed': 'whatChanged',
        'entity': 'entity',
        'entity_specified': 'entitySpecified',
        'grant_option': 'grantOption',
        'affected_role': 'affectedRole',
        'user': 'user',
        'enabled_roles': 'enabledRoles',
        'at_time': 'atTime'
    }

    def __init__(self, id=None, query_id=None, operation=None, entity_kind=None, what_changed=None, entity=None, entity_specified=None, grant_option=None, affected_role=None, user=None, enabled_roles=None, at_time=None):  # noqa: E501
        """ChangeLogResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._query_id = None
        self._operation = None
        self._entity_kind = None
        self._what_changed = None
        self._entity = None
        self._entity_specified = None
        self._grant_option = None
        self._affected_role = None
        self._user = None
        self._enabled_roles = None
        self._at_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if query_id is not None:
            self.query_id = query_id
        if operation is not None:
            self.operation = operation
        if entity_kind is not None:
            self.entity_kind = entity_kind
        if what_changed is not None:
            self.what_changed = what_changed
        if entity is not None:
            self.entity = entity
        if entity_specified is not None:
            self.entity_specified = entity_specified
        if grant_option is not None:
            self.grant_option = grant_option
        if affected_role is not None:
            self.affected_role = affected_role
        if user is not None:
            self.user = user
        if enabled_roles is not None:
            self.enabled_roles = enabled_roles
        if at_time is not None:
            self.at_time = at_time

    @property
    def id(self):
        """Gets the id of this ChangeLogResponse.  # noqa: E501


        :return: The id of this ChangeLogResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeLogResponse.


        :param id: The id of this ChangeLogResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def query_id(self):
        """Gets the query_id of this ChangeLogResponse.  # noqa: E501

        ID of the query that made the change  # noqa: E501

        :return: The query_id of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this ChangeLogResponse.

        ID of the query that made the change  # noqa: E501

        :param query_id: The query_id of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._query_id = query_id

    @property
    def operation(self):
        """Gets the operation of this ChangeLogResponse.  # noqa: E501

        Type of the change  # noqa: E501

        :return: The operation of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ChangeLogResponse.

        Type of the change  # noqa: E501

        :param operation: The operation of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def entity_kind(self):
        """Gets the entity_kind of this ChangeLogResponse.  # noqa: E501

        Kind of the entity that the change relates to  # noqa: E501

        :return: The entity_kind of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_kind

    @entity_kind.setter
    def entity_kind(self, entity_kind):
        """Sets the entity_kind of this ChangeLogResponse.

        Kind of the entity that the change relates to  # noqa: E501

        :param entity_kind: The entity_kind of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._entity_kind = entity_kind

    @property
    def what_changed(self):
        """Gets the what_changed of this ChangeLogResponse.  # noqa: E501

        Description of what has changed  # noqa: E501

        :return: The what_changed of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._what_changed

    @what_changed.setter
    def what_changed(self, what_changed):
        """Sets the what_changed of this ChangeLogResponse.

        Description of what has changed  # noqa: E501

        :param what_changed: The what_changed of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._what_changed = what_changed

    @property
    def entity(self):
        """Gets the entity of this ChangeLogResponse.  # noqa: E501

        Text representation of the entity that the change relates to  # noqa: E501

        :return: The entity of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ChangeLogResponse.

        Text representation of the entity that the change relates to  # noqa: E501

        :param entity: The entity of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def entity_specified(self):
        """Gets the entity_specified of this ChangeLogResponse.  # noqa: E501

        If true, the change applies to a specific entity, otherwise the change applies to all entities of the given kind  # noqa: E501

        :return: The entity_specified of this ChangeLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._entity_specified

    @entity_specified.setter
    def entity_specified(self, entity_specified):
        """Sets the entity_specified of this ChangeLogResponse.

        If true, the change applies to a specific entity, otherwise the change applies to all entities of the given kind  # noqa: E501

        :param entity_specified: The entity_specified of this ChangeLogResponse.  # noqa: E501
        :type: bool
        """

        self._entity_specified = entity_specified

    @property
    def grant_option(self):
        """Gets the grant_option of this ChangeLogResponse.  # noqa: E501

        If true, GRANT OPTION applies to the affected role for the related entity  # noqa: E501

        :return: The grant_option of this ChangeLogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._grant_option

    @grant_option.setter
    def grant_option(self, grant_option):
        """Sets the grant_option of this ChangeLogResponse.

        If true, GRANT OPTION applies to the affected role for the related entity  # noqa: E501

        :param grant_option: The grant_option of this ChangeLogResponse.  # noqa: E501
        :type: bool
        """

        self._grant_option = grant_option

    @property
    def affected_role(self):
        """Gets the affected_role of this ChangeLogResponse.  # noqa: E501

        Name of the role that was affected by this change  # noqa: E501

        :return: The affected_role of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._affected_role

    @affected_role.setter
    def affected_role(self, affected_role):
        """Sets the affected_role of this ChangeLogResponse.

        Name of the role that was affected by this change  # noqa: E501

        :param affected_role: The affected_role of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._affected_role = affected_role

    @property
    def user(self):
        """Gets the user of this ChangeLogResponse.  # noqa: E501

        Session user that has made this change  # noqa: E501

        :return: The user of this ChangeLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChangeLogResponse.

        Session user that has made this change  # noqa: E501

        :param user: The user of this ChangeLogResponse.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def enabled_roles(self):
        """Gets the enabled_roles of this ChangeLogResponse.  # noqa: E501

        Roles enabled on the session that has made this change  # noqa: E501

        :return: The enabled_roles of this ChangeLogResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_roles

    @enabled_roles.setter
    def enabled_roles(self, enabled_roles):
        """Sets the enabled_roles of this ChangeLogResponse.

        Roles enabled on the session that has made this change  # noqa: E501

        :param enabled_roles: The enabled_roles of this ChangeLogResponse.  # noqa: E501
        :type: list[str]
        """

        self._enabled_roles = enabled_roles

    @property
    def at_time(self):
        """Gets the at_time of this ChangeLogResponse.  # noqa: E501

        When this change was made  # noqa: E501

        :return: The at_time of this ChangeLogResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._at_time

    @at_time.setter
    def at_time(self, at_time):
        """Sets the at_time of this ChangeLogResponse.

        When this change was made  # noqa: E501

        :param at_time: The at_time of this ChangeLogResponse.  # noqa: E501
        :type: datetime
        """

        self._at_time = at_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeLogResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeLogResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
