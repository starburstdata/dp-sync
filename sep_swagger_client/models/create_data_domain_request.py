# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDataDomainRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'schema_location': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'schema_location': 'schemaLocation'
    }

    def __init__(self, name=None, description=None, schema_location=None):  # noqa: E501
        """CreateDataDomainRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._schema_location = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if schema_location is not None:
            self.schema_location = schema_location

    @property
    def name(self):
        """Gets the name of this CreateDataDomainRequest.  # noqa: E501

        Name of the domain.  # noqa: E501

        :return: The name of this CreateDataDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDataDomainRequest.

        Name of the domain.  # noqa: E501

        :param name: The name of this CreateDataDomainRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateDataDomainRequest.  # noqa: E501

        Domain description.  # noqa: E501

        :return: The description of this CreateDataDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDataDomainRequest.

        Domain description.  # noqa: E501

        :param description: The description of this CreateDataDomainRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schema_location(self):
        """Gets the schema_location of this CreateDataDomainRequest.  # noqa: E501

        URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog is used.  # noqa: E501

        :return: The schema_location of this CreateDataDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this CreateDataDomainRequest.

        URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog is used.  # noqa: E501

        :param schema_location: The schema_location of this CreateDataDomainRequest.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDataDomainRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDataDomainRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
