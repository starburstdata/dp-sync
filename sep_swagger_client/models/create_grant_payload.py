# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateGrantPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effect': 'Effect',
        'action': 'Action',
        'entity': 'EntityModel'
    }

    attribute_map = {
        'effect': 'effect',
        'action': 'action',
        'entity': 'entity'
    }

    def __init__(self, effect=None, action=None, entity=None):  # noqa: E501
        """CreateGrantPayload - a model defined in Swagger"""  # noqa: E501
        self._effect = None
        self._action = None
        self._entity = None
        self.discriminator = None
        if effect is not None:
            self.effect = effect
        if action is not None:
            self.action = action
        if entity is not None:
            self.entity = entity

    @property
    def effect(self):
        """Gets the effect of this CreateGrantPayload.  # noqa: E501


        :return: The effect of this CreateGrantPayload.  # noqa: E501
        :rtype: Effect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this CreateGrantPayload.


        :param effect: The effect of this CreateGrantPayload.  # noqa: E501
        :type: Effect
        """

        self._effect = effect

    @property
    def action(self):
        """Gets the action of this CreateGrantPayload.  # noqa: E501


        :return: The action of this CreateGrantPayload.  # noqa: E501
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateGrantPayload.


        :param action: The action of this CreateGrantPayload.  # noqa: E501
        :type: Action
        """

        self._action = action

    @property
    def entity(self):
        """Gets the entity of this CreateGrantPayload.  # noqa: E501


        :return: The entity of this CreateGrantPayload.  # noqa: E501
        :rtype: EntityModel
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CreateGrantPayload.


        :param entity: The entity of this CreateGrantPayload.  # noqa: E501
        :type: EntityModel
        """

        self._entity = entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateGrantPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGrantPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
