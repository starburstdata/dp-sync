# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'schema_location': 'str',
        'assigned_data_products': 'list[DataProductSummary]',
        'created_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'updated_by': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'schema_location': 'schemaLocation',
        'assigned_data_products': 'assignedDataProducts',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, name=None, description=None, schema_location=None, assigned_data_products=None, created_by=None, created_at=None, updated_at=None, updated_by=None):  # noqa: E501
        """DataDomain - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._schema_location = None
        self._assigned_data_products = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self._updated_by = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if schema_location is not None:
            self.schema_location = schema_location
        self.assigned_data_products = assigned_data_products
        self.created_by = created_by
        self.created_at = created_at
        self.updated_at = updated_at
        self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this DataDomain.  # noqa: E501

        Domain UUID.  # noqa: E501

        :return: The id of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataDomain.

        Domain UUID.  # noqa: E501

        :param id: The id of this DataDomain.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataDomain.  # noqa: E501

        Name of the domain.  # noqa: E501

        :return: The name of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataDomain.

        Name of the domain.  # noqa: E501

        :param name: The name of this DataDomain.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataDomain.  # noqa: E501

        Domain description.  # noqa: E501

        :return: The description of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataDomain.

        Domain description.  # noqa: E501

        :param description: The description of this DataDomain.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schema_location(self):
        """Gets the schema_location of this DataDomain.  # noqa: E501

        URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog will be used.  # noqa: E501

        :return: The schema_location of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this DataDomain.

        URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog will be used.  # noqa: E501

        :param schema_location: The schema_location of this DataDomain.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    @property
    def assigned_data_products(self):
        """Gets the assigned_data_products of this DataDomain.  # noqa: E501

        List of the data products that are assigned to this domain.  # noqa: E501

        :return: The assigned_data_products of this DataDomain.  # noqa: E501
        :rtype: list[DataProductSummary]
        """
        return self._assigned_data_products

    @assigned_data_products.setter
    def assigned_data_products(self, assigned_data_products):
        """Sets the assigned_data_products of this DataDomain.

        List of the data products that are assigned to this domain.  # noqa: E501

        :param assigned_data_products: The assigned_data_products of this DataDomain.  # noqa: E501
        :type: list[DataProductSummary]
        """
        if assigned_data_products is None:
            raise ValueError("Invalid value for `assigned_data_products`, must not be `None`")  # noqa: E501

        self._assigned_data_products = assigned_data_products

    @property
    def created_by(self):
        """Gets the created_by of this DataDomain.  # noqa: E501

        Name of the user who created this domain.  # noqa: E501

        :return: The created_by of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DataDomain.

        Name of the user who created this domain.  # noqa: E501

        :param created_by: The created_by of this DataDomain.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this DataDomain.  # noqa: E501

        Timestamp of when this domain was created.  # noqa: E501

        :return: The created_at of this DataDomain.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataDomain.

        Timestamp of when this domain was created.  # noqa: E501

        :param created_at: The created_at of this DataDomain.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataDomain.  # noqa: E501

        Timestamp of when this domain was last updated. This is initialized to createdAt.  # noqa: E501

        :return: The updated_at of this DataDomain.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataDomain.

        Timestamp of when this domain was last updated. This is initialized to createdAt.  # noqa: E501

        :param updated_at: The updated_at of this DataDomain.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this DataDomain.  # noqa: E501

        Name of the user who last updated this domain.  This is initialized to createdBy  # noqa: E501

        :return: The updated_by of this DataDomain.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DataDomain.

        Name of the user who last updated this domain.  This is initialized to createdBy  # noqa: E501

        :param updated_by: The updated_by of this DataDomain.  # noqa: E501
        :type: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
