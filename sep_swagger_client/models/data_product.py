# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'catalog_name': 'str',
        'schema_name': 'str',
        'data_domain_id': 'str',
        'summary': 'str',
        'description': 'str',
        'created_by': 'str',
        'status': 'DataProductStatus',
        'views': 'list[ViewDataset]',
        'materialized_views': 'list[MaterializedViewDataset]',
        'owners': 'list[DataProductOwner]',
        'relevant_links': 'list[RelevantLink]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'updated_by': 'str',
        'published_at': 'datetime',
        'published_by': 'str',
        'access_metadata': 'AccessMetadata',
        'ratings_average': 'float',
        'ratings_count': 'int',
        'user_data': 'DataProductUserData',
        'matches_trino_definition': 'bool',
        'bookmark_count': 'int',
        'product_owners': 'list[DataProductOwner]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'catalog_name': 'catalogName',
        'schema_name': 'schemaName',
        'data_domain_id': 'dataDomainId',
        'summary': 'summary',
        'description': 'description',
        'created_by': 'createdBy',
        'status': 'status',
        'views': 'views',
        'materialized_views': 'materializedViews',
        'owners': 'owners',
        'relevant_links': 'relevantLinks',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy',
        'published_at': 'publishedAt',
        'published_by': 'publishedBy',
        'access_metadata': 'accessMetadata',
        'ratings_average': 'ratingsAverage',
        'ratings_count': 'ratingsCount',
        'user_data': 'userData',
        'matches_trino_definition': 'matchesTrinoDefinition',
        'bookmark_count': 'bookmarkCount',
        'product_owners': 'productOwners'
    }

    def __init__(self, id=None, name=None, catalog_name=None, schema_name=None, data_domain_id=None, summary=None, description=None, created_by=None, status=None, views=None, materialized_views=None, owners=None, relevant_links=None, created_at=None, updated_at=None, updated_by=None, published_at=None, published_by=None, access_metadata=None, ratings_average=None, ratings_count=None, user_data=None, matches_trino_definition=None, bookmark_count=None, product_owners=None):  # noqa: E501
        """DataProduct - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._catalog_name = None
        self._schema_name = None
        self._data_domain_id = None
        self._summary = None
        self._description = None
        self._created_by = None
        self._status = None
        self._views = None
        self._materialized_views = None
        self._owners = None
        self._relevant_links = None
        self._created_at = None
        self._updated_at = None
        self._updated_by = None
        self._published_at = None
        self._published_by = None
        self._access_metadata = None
        self._ratings_average = None
        self._ratings_count = None
        self._user_data = None
        self._matches_trino_definition = None
        self._bookmark_count = None
        self._product_owners = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if catalog_name is not None:
            self.catalog_name = catalog_name
        if schema_name is not None:
            self.schema_name = schema_name
        if data_domain_id is not None:
            self.data_domain_id = data_domain_id
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if created_by is not None:
            self.created_by = created_by
        if status is not None:
            self.status = status
        if views is not None:
            self.views = views
        if materialized_views is not None:
            self.materialized_views = materialized_views
        if owners is not None:
            self.owners = owners
        if relevant_links is not None:
            self.relevant_links = relevant_links
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by
        if published_at is not None:
            self.published_at = published_at
        if published_by is not None:
            self.published_by = published_by
        if access_metadata is not None:
            self.access_metadata = access_metadata
        if ratings_average is not None:
            self.ratings_average = ratings_average
        if ratings_count is not None:
            self.ratings_count = ratings_count
        self.user_data = user_data
        if matches_trino_definition is not None:
            self.matches_trino_definition = matches_trino_definition
        if bookmark_count is not None:
            self.bookmark_count = bookmark_count
        if product_owners is not None:
            self.product_owners = product_owners

    @property
    def id(self):
        """Gets the id of this DataProduct.  # noqa: E501

        Data product UUID  # noqa: E501

        :return: The id of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataProduct.

        Data product UUID  # noqa: E501

        :param id: The id of this DataProduct.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataProduct.  # noqa: E501

        Data product name.  # noqa: E501

        :return: The name of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataProduct.

        Data product name.  # noqa: E501

        :param name: The name of this DataProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def catalog_name(self):
        """Gets the catalog_name of this DataProduct.  # noqa: E501

        Catalog to store this data product.  # noqa: E501

        :return: The catalog_name of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """Sets the catalog_name of this DataProduct.

        Catalog to store this data product.  # noqa: E501

        :param catalog_name: The catalog_name of this DataProduct.  # noqa: E501
        :type: str
        """

        self._catalog_name = catalog_name

    @property
    def schema_name(self):
        """Gets the schema_name of this DataProduct.  # noqa: E501

        Trino schema name that will be generated for this data product.  # noqa: E501

        :return: The schema_name of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this DataProduct.

        Trino schema name that will be generated for this data product.  # noqa: E501

        :param schema_name: The schema_name of this DataProduct.  # noqa: E501
        :type: str
        """

        self._schema_name = schema_name

    @property
    def data_domain_id(self):
        """Gets the data_domain_id of this DataProduct.  # noqa: E501

        UUID of the domain that this data product belongs to.  # noqa: E501

        :return: The data_domain_id of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._data_domain_id

    @data_domain_id.setter
    def data_domain_id(self, data_domain_id):
        """Sets the data_domain_id of this DataProduct.

        UUID of the domain that this data product belongs to.  # noqa: E501

        :param data_domain_id: The data_domain_id of this DataProduct.  # noqa: E501
        :type: str
        """

        self._data_domain_id = data_domain_id

    @property
    def summary(self):
        """Gets the summary of this DataProduct.  # noqa: E501

        Summary description for this data product.  # noqa: E501

        :return: The summary of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DataProduct.

        Summary description for this data product.  # noqa: E501

        :param summary: The summary of this DataProduct.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this DataProduct.  # noqa: E501

        Description for this data product.  # noqa: E501

        :return: The description of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataProduct.

        Description for this data product.  # noqa: E501

        :param description: The description of this DataProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this DataProduct.  # noqa: E501

        User who created this data product.  # noqa: E501

        :return: The created_by of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DataProduct.

        User who created this data product.  # noqa: E501

        :param created_by: The created_by of this DataProduct.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def status(self):
        """Gets the status of this DataProduct.  # noqa: E501


        :return: The status of this DataProduct.  # noqa: E501
        :rtype: DataProductStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataProduct.


        :param status: The status of this DataProduct.  # noqa: E501
        :type: DataProductStatus
        """

        self._status = status

    @property
    def views(self):
        """Gets the views of this DataProduct.  # noqa: E501

        View datasets for this data product.  # noqa: E501

        :return: The views of this DataProduct.  # noqa: E501
        :rtype: list[ViewDataset]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this DataProduct.

        View datasets for this data product.  # noqa: E501

        :param views: The views of this DataProduct.  # noqa: E501
        :type: list[ViewDataset]
        """

        self._views = views

    @property
    def materialized_views(self):
        """Gets the materialized_views of this DataProduct.  # noqa: E501

        Materialized views for this data product.  # noqa: E501

        :return: The materialized_views of this DataProduct.  # noqa: E501
        :rtype: list[MaterializedViewDataset]
        """
        return self._materialized_views

    @materialized_views.setter
    def materialized_views(self, materialized_views):
        """Sets the materialized_views of this DataProduct.

        Materialized views for this data product.  # noqa: E501

        :param materialized_views: The materialized_views of this DataProduct.  # noqa: E501
        :type: list[MaterializedViewDataset]
        """

        self._materialized_views = materialized_views

    @property
    def owners(self):
        """Gets the owners of this DataProduct.  # noqa: E501


        :return: The owners of this DataProduct.  # noqa: E501
        :rtype: list[DataProductOwner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this DataProduct.


        :param owners: The owners of this DataProduct.  # noqa: E501
        :type: list[DataProductOwner]
        """

        self._owners = owners

    @property
    def relevant_links(self):
        """Gets the relevant_links of this DataProduct.  # noqa: E501

        Relevant links for this data product.  # noqa: E501

        :return: The relevant_links of this DataProduct.  # noqa: E501
        :rtype: list[RelevantLink]
        """
        return self._relevant_links

    @relevant_links.setter
    def relevant_links(self, relevant_links):
        """Sets the relevant_links of this DataProduct.

        Relevant links for this data product.  # noqa: E501

        :param relevant_links: The relevant_links of this DataProduct.  # noqa: E501
        :type: list[RelevantLink]
        """

        self._relevant_links = relevant_links

    @property
    def created_at(self):
        """Gets the created_at of this DataProduct.  # noqa: E501

        Timestamp of when this data product was created.  # noqa: E501

        :return: The created_at of this DataProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataProduct.

        Timestamp of when this data product was created.  # noqa: E501

        :param created_at: The created_at of this DataProduct.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataProduct.  # noqa: E501

        Timestamp of when this data product was last updated.  Will be initialized to createdAt timestamp.  # noqa: E501

        :return: The updated_at of this DataProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataProduct.

        Timestamp of when this data product was last updated.  Will be initialized to createdAt timestamp.  # noqa: E501

        :param updated_at: The updated_at of this DataProduct.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this DataProduct.  # noqa: E501

        User who last updated this data product.  # noqa: E501

        :return: The updated_by of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DataProduct.

        User who last updated this data product.  # noqa: E501

        :param updated_by: The updated_by of this DataProduct.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def published_at(self):
        """Gets the published_at of this DataProduct.  # noqa: E501

        Timestamp of when this data product was last published.  # noqa: E501

        :return: The published_at of this DataProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this DataProduct.

        Timestamp of when this data product was last published.  # noqa: E501

        :param published_at: The published_at of this DataProduct.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def published_by(self):
        """Gets the published_by of this DataProduct.  # noqa: E501

        User who published this data product.  # noqa: E501

        :return: The published_by of this DataProduct.  # noqa: E501
        :rtype: str
        """
        return self._published_by

    @published_by.setter
    def published_by(self, published_by):
        """Sets the published_by of this DataProduct.

        User who published this data product.  # noqa: E501

        :param published_by: The published_by of this DataProduct.  # noqa: E501
        :type: str
        """

        self._published_by = published_by

    @property
    def access_metadata(self):
        """Gets the access_metadata of this DataProduct.  # noqa: E501


        :return: The access_metadata of this DataProduct.  # noqa: E501
        :rtype: AccessMetadata
        """
        return self._access_metadata

    @access_metadata.setter
    def access_metadata(self, access_metadata):
        """Sets the access_metadata of this DataProduct.


        :param access_metadata: The access_metadata of this DataProduct.  # noqa: E501
        :type: AccessMetadata
        """

        self._access_metadata = access_metadata

    @property
    def ratings_average(self):
        """Gets the ratings_average of this DataProduct.  # noqa: E501

        Average user rating of this data product.  If empty then this data product has not been rated yet.  # noqa: E501

        :return: The ratings_average of this DataProduct.  # noqa: E501
        :rtype: float
        """
        return self._ratings_average

    @ratings_average.setter
    def ratings_average(self, ratings_average):
        """Sets the ratings_average of this DataProduct.

        Average user rating of this data product.  If empty then this data product has not been rated yet.  # noqa: E501

        :param ratings_average: The ratings_average of this DataProduct.  # noqa: E501
        :type: float
        """

        self._ratings_average = ratings_average

    @property
    def ratings_count(self):
        """Gets the ratings_count of this DataProduct.  # noqa: E501

        Number of user ratings of this data product.  # noqa: E501

        :return: The ratings_count of this DataProduct.  # noqa: E501
        :rtype: int
        """
        return self._ratings_count

    @ratings_count.setter
    def ratings_count(self, ratings_count):
        """Sets the ratings_count of this DataProduct.

        Number of user ratings of this data product.  # noqa: E501

        :param ratings_count: The ratings_count of this DataProduct.  # noqa: E501
        :type: int
        """

        self._ratings_count = ratings_count

    @property
    def user_data(self):
        """Gets the user_data of this DataProduct.  # noqa: E501


        :return: The user_data of this DataProduct.  # noqa: E501
        :rtype: DataProductUserData
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this DataProduct.


        :param user_data: The user_data of this DataProduct.  # noqa: E501
        :type: DataProductUserData
        """
        if user_data is None:
            raise ValueError("Invalid value for `user_data`, must not be `None`")  # noqa: E501

        self._user_data = user_data

    @property
    def matches_trino_definition(self):
        """Gets the matches_trino_definition of this DataProduct.  # noqa: E501

        If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views  # noqa: E501

        :return: The matches_trino_definition of this DataProduct.  # noqa: E501
        :rtype: bool
        """
        return self._matches_trino_definition

    @matches_trino_definition.setter
    def matches_trino_definition(self, matches_trino_definition):
        """Sets the matches_trino_definition of this DataProduct.

        If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views  # noqa: E501

        :param matches_trino_definition: The matches_trino_definition of this DataProduct.  # noqa: E501
        :type: bool
        """

        self._matches_trino_definition = matches_trino_definition

    @property
    def bookmark_count(self):
        """Gets the bookmark_count of this DataProduct.  # noqa: E501

        The number of bookmarks for this data product.  # noqa: E501

        :return: The bookmark_count of this DataProduct.  # noqa: E501
        :rtype: int
        """
        return self._bookmark_count

    @bookmark_count.setter
    def bookmark_count(self, bookmark_count):
        """Sets the bookmark_count of this DataProduct.

        The number of bookmarks for this data product.  # noqa: E501

        :param bookmark_count: The bookmark_count of this DataProduct.  # noqa: E501
        :type: int
        """

        self._bookmark_count = bookmark_count

    @property
    def product_owners(self):
        """Gets the product_owners of this DataProduct.  # noqa: E501

        User-supplied list of owners.  Used to indicate who is maintaining this data product.  # noqa: E501

        :return: The product_owners of this DataProduct.  # noqa: E501
        :rtype: list[DataProductOwner]
        """
        return self._product_owners

    @product_owners.setter
    def product_owners(self, product_owners):
        """Sets the product_owners of this DataProduct.

        User-supplied list of owners.  Used to indicate who is maintaining this data product.  # noqa: E501

        :param product_owners: The product_owners of this DataProduct.  # noqa: E501
        :type: list[DataProductOwner]
        """

        self._product_owners = product_owners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
