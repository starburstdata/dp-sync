# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from sep_swagger_client.models.error_detail_type import ErrorDetailType  # noqa: F401,E501

class EntityIdentifier(ErrorDetailType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'EntityType',
        'entity_id': 'object',
        'entity_name': 'str'
    }
    if hasattr(ErrorDetailType, "swagger_types"):
        swagger_types.update(ErrorDetailType.swagger_types)

    attribute_map = {
        'entity_type': 'entityType',
        'entity_id': 'entityId',
        'entity_name': 'entityName'
    }
    if hasattr(ErrorDetailType, "attribute_map"):
        attribute_map.update(ErrorDetailType.attribute_map)

    def __init__(self, entity_type=None, entity_id=None, entity_name=None, *args, **kwargs):  # noqa: E501
        """EntityIdentifier - a model defined in Swagger"""  # noqa: E501
        self._entity_type = None
        self._entity_id = None
        self._entity_name = None
        self.discriminator = None
        if entity_type is not None:
            self.entity_type = entity_type
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_name is not None:
            self.entity_name = entity_name
        ErrorDetailType.__init__(self, *args, **kwargs)

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityIdentifier.  # noqa: E501


        :return: The entity_type of this EntityIdentifier.  # noqa: E501
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityIdentifier.


        :param entity_type: The entity_type of this EntityIdentifier.  # noqa: E501
        :type: EntityType
        """

        self._entity_type = entity_type

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityIdentifier.  # noqa: E501


        :return: The entity_id of this EntityIdentifier.  # noqa: E501
        :rtype: object
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityIdentifier.


        :param entity_id: The entity_id of this EntityIdentifier.  # noqa: E501
        :type: object
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this EntityIdentifier.  # noqa: E501


        :return: The entity_name of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this EntityIdentifier.


        :param entity_name: The entity_name of this EntityIdentifier.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
