# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'all_entities': 'bool'
    }

    attribute_map = {
        'category': 'category',
        'all_entities': 'allEntities'
    }

    discriminator_value_class_map = {
            'TABLES'.lower(): '#/components/schemas/TableEntityData',
            'SYSTEM_SESSION_PROPERTIES'.lower(): '#/components/schemas/SingleKeyEntityData',
            'ROLES'.lower(): '#/components/schemas/SingleKeyEntityData',
            'USERS'.lower(): '#/components/schemas/SingleKeyEntityData',
            'FUNCTIONS'.lower(): '#/components/schemas/FunctionEntityData',
            'PROCEDURES'.lower(): '#/components/schemas/ProcedureEntityData',
            'CATALOG_SESSION_PROPERTIES'.lower(): '#/components/schemas/CatalogKeyEntityData',
            'QUERIES'.lower(): '#/components/schemas/GlobalEntityData',
            'AUDIT_LOGS'.lower(): '#/components/schemas/GlobalEntityData',
            'SYSTEM_INFORMATION'.lower(): '#/components/schemas/GlobalEntityData',
            'DATA_PRODUCTS'.lower(): '#/components/schemas/DataProductEntityData',
            'TABLE_PROPERTIES'.lower(): '#/components/schemas/PropertyEntityData',
            'SCHEMA_PROPERTIES'.lower(): '#/components/schemas/PropertyEntityData',
            'CatalogKeyEntityData'.lower(): 'CATALOG_SESSION_PROPERTIES',
            'ProcedureEntityData'.lower(): 'PROCEDURES',
            'GlobalEntityData'.lower(): 'SYSTEM_INFORMATION',
            'TableEntityData'.lower(): 'TABLES',
            'DataProductEntityData'.lower(): 'DATA_PRODUCTS',
            'SingleKeyEntityData'.lower(): 'USERS',
            'PropertyEntityData'.lower(): 'SCHEMA_PROPERTIES',
            'FunctionEntityData'.lower(): 'FUNCTIONS',
    }

    def __init__(self, category=None, all_entities=None):  # noqa: E501
        """EntityModel - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._all_entities = None
        self.discriminator = 'category'
        if category is not None:
            self.category = category
        if all_entities is not None:
            self.all_entities = all_entities

    @property
    def category(self):
        """Gets the category of this EntityModel.  # noqa: E501

        TABLES, SCHEMA_PROPERTIES, TABLE_PROPERTIES, SYSTEM_SESSION_PROPERTIES, CATALOG_SESSION_PROPERTIES, FUNCTIONS, PROCEDURES, QUERIES, SYSTEM_INFORMATION, ROLES, USERS, DATA_PRODUCTS, AUDIT_LOGS  # noqa: E501

        :return: The category of this EntityModel.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EntityModel.

        TABLES, SCHEMA_PROPERTIES, TABLE_PROPERTIES, SYSTEM_SESSION_PROPERTIES, CATALOG_SESSION_PROPERTIES, FUNCTIONS, PROCEDURES, QUERIES, SYSTEM_INFORMATION, ROLES, USERS, DATA_PRODUCTS, AUDIT_LOGS  # noqa: E501

        :param category: The category of this EntityModel.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def all_entities(self):
        """Gets the all_entities of this EntityModel.  # noqa: E501

        Is the entity representing all entities of the given category  # noqa: E501

        :return: The all_entities of this EntityModel.  # noqa: E501
        :rtype: bool
        """
        return self._all_entities

    @all_entities.setter
    def all_entities(self, all_entities):
        """Sets the all_entities of this EntityModel.

        Is the entity representing all entities of the given category  # noqa: E501

        :param all_entities: The all_entities of this EntityModel.  # noqa: E501
        :type: bool
        """

        self._all_entities = all_entities

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
