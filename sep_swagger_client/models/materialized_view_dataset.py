# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterializedViewDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'created_by': 'str',
        'definition_query': 'str',
        'definition_properties': 'dict(str, object)',
        'status': 'DataProductStatus',
        'columns': 'list[ColumnDocumentation]',
        'marked_for_deletion': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'updated_by': 'str',
        'published_at': 'datetime',
        'published_by': 'str',
        'matches_trino_definition': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'created_by': 'createdBy',
        'definition_query': 'definitionQuery',
        'definition_properties': 'definitionProperties',
        'status': 'status',
        'columns': 'columns',
        'marked_for_deletion': 'markedForDeletion',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy',
        'published_at': 'publishedAt',
        'published_by': 'publishedBy',
        'matches_trino_definition': 'matchesTrinoDefinition'
    }

    def __init__(self, name=None, description=None, created_by=None, definition_query=None, definition_properties=None, status=None, columns=None, marked_for_deletion=None, created_at=None, updated_at=None, updated_by=None, published_at=None, published_by=None, matches_trino_definition=None):  # noqa: E501
        """MaterializedViewDataset - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._created_by = None
        self._definition_query = None
        self._definition_properties = None
        self._status = None
        self._columns = None
        self._marked_for_deletion = None
        self._created_at = None
        self._updated_at = None
        self._updated_by = None
        self._published_at = None
        self._published_by = None
        self._matches_trino_definition = None
        self.discriminator = None
        self.name = name
        self.description = description
        self.created_by = created_by
        self.definition_query = definition_query
        self.definition_properties = definition_properties
        self.status = status
        self.columns = columns
        self.marked_for_deletion = marked_for_deletion
        self.created_at = created_at
        self.updated_at = updated_at
        self.updated_by = updated_by
        self.published_at = published_at
        self.published_by = published_by
        if matches_trino_definition is not None:
            self.matches_trino_definition = matches_trino_definition

    @property
    def name(self):
        """Gets the name of this MaterializedViewDataset.  # noqa: E501

        Name of the materialized view.  # noqa: E501

        :return: The name of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaterializedViewDataset.

        Name of the materialized view.  # noqa: E501

        :param name: The name of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MaterializedViewDataset.  # noqa: E501

        Description of the materialized view.  # noqa: E501

        :return: The description of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaterializedViewDataset.

        Description of the materialized view.  # noqa: E501

        :param description: The description of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this MaterializedViewDataset.  # noqa: E501

        Name of the user who created the materialized view.  # noqa: E501

        :return: The created_by of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MaterializedViewDataset.

        Name of the user who created the materialized view.  # noqa: E501

        :param created_by: The created_by of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def definition_query(self):
        """Gets the definition_query of this MaterializedViewDataset.  # noqa: E501

        Definition query for the materialized view.  # noqa: E501

        :return: The definition_query of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._definition_query

    @definition_query.setter
    def definition_query(self, definition_query):
        """Sets the definition_query of this MaterializedViewDataset.

        Definition query for the materialized view.  # noqa: E501

        :param definition_query: The definition_query of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if definition_query is None:
            raise ValueError("Invalid value for `definition_query`, must not be `None`")  # noqa: E501

        self._definition_query = definition_query

    @property
    def definition_properties(self):
        """Gets the definition_properties of this MaterializedViewDataset.  # noqa: E501

        Definition properties for the materialized view.  # noqa: E501

        :return: The definition_properties of this MaterializedViewDataset.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._definition_properties

    @definition_properties.setter
    def definition_properties(self, definition_properties):
        """Sets the definition_properties of this MaterializedViewDataset.

        Definition properties for the materialized view.  # noqa: E501

        :param definition_properties: The definition_properties of this MaterializedViewDataset.  # noqa: E501
        :type: dict(str, object)
        """
        if definition_properties is None:
            raise ValueError("Invalid value for `definition_properties`, must not be `None`")  # noqa: E501

        self._definition_properties = definition_properties

    @property
    def status(self):
        """Gets the status of this MaterializedViewDataset.  # noqa: E501


        :return: The status of this MaterializedViewDataset.  # noqa: E501
        :rtype: DataProductStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MaterializedViewDataset.


        :param status: The status of this MaterializedViewDataset.  # noqa: E501
        :type: DataProductStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def columns(self):
        """Gets the columns of this MaterializedViewDataset.  # noqa: E501

        Column definitions.  # noqa: E501

        :return: The columns of this MaterializedViewDataset.  # noqa: E501
        :rtype: list[ColumnDocumentation]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this MaterializedViewDataset.

        Column definitions.  # noqa: E501

        :param columns: The columns of this MaterializedViewDataset.  # noqa: E501
        :type: list[ColumnDocumentation]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def marked_for_deletion(self):
        """Gets the marked_for_deletion of this MaterializedViewDataset.  # noqa: E501

        If true, then this materialized view will be removed as part of the next publish.  # noqa: E501

        :return: The marked_for_deletion of this MaterializedViewDataset.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_deletion

    @marked_for_deletion.setter
    def marked_for_deletion(self, marked_for_deletion):
        """Sets the marked_for_deletion of this MaterializedViewDataset.

        If true, then this materialized view will be removed as part of the next publish.  # noqa: E501

        :param marked_for_deletion: The marked_for_deletion of this MaterializedViewDataset.  # noqa: E501
        :type: bool
        """
        if marked_for_deletion is None:
            raise ValueError("Invalid value for `marked_for_deletion`, must not be `None`")  # noqa: E501

        self._marked_for_deletion = marked_for_deletion

    @property
    def created_at(self):
        """Gets the created_at of this MaterializedViewDataset.  # noqa: E501

        Timestamp of when this materialized view was created.  # noqa: E501

        :return: The created_at of this MaterializedViewDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MaterializedViewDataset.

        Timestamp of when this materialized view was created.  # noqa: E501

        :param created_at: The created_at of this MaterializedViewDataset.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MaterializedViewDataset.  # noqa: E501

        Timestamp of when this materialized view was last updated. This is initialized to createdAt.  # noqa: E501

        :return: The updated_at of this MaterializedViewDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MaterializedViewDataset.

        Timestamp of when this materialized view was last updated. This is initialized to createdAt.  # noqa: E501

        :param updated_at: The updated_at of this MaterializedViewDataset.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this MaterializedViewDataset.  # noqa: E501

        Name of the user who last updated the materialized view.  This is initialized to createdBy  # noqa: E501

        :return: The updated_by of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this MaterializedViewDataset.

        Name of the user who last updated the materialized view.  This is initialized to createdBy  # noqa: E501

        :param updated_by: The updated_by of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def published_at(self):
        """Gets the published_at of this MaterializedViewDataset.  # noqa: E501

        Timestamp of when this materialized view was last published.  # noqa: E501

        :return: The published_at of this MaterializedViewDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this MaterializedViewDataset.

        Timestamp of when this materialized view was last published.  # noqa: E501

        :param published_at: The published_at of this MaterializedViewDataset.  # noqa: E501
        :type: datetime
        """
        if published_at is None:
            raise ValueError("Invalid value for `published_at`, must not be `None`")  # noqa: E501

        self._published_at = published_at

    @property
    def published_by(self):
        """Gets the published_by of this MaterializedViewDataset.  # noqa: E501

        Name of the user who last published the materialized view.  # noqa: E501

        :return: The published_by of this MaterializedViewDataset.  # noqa: E501
        :rtype: str
        """
        return self._published_by

    @published_by.setter
    def published_by(self, published_by):
        """Sets the published_by of this MaterializedViewDataset.

        Name of the user who last published the materialized view.  # noqa: E501

        :param published_by: The published_by of this MaterializedViewDataset.  # noqa: E501
        :type: str
        """
        if published_by is None:
            raise ValueError("Invalid value for `published_by`, must not be `None`")  # noqa: E501

        self._published_by = published_by

    @property
    def matches_trino_definition(self):
        """Gets the matches_trino_definition of this MaterializedViewDataset.  # noqa: E501

        If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views  # noqa: E501

        :return: The matches_trino_definition of this MaterializedViewDataset.  # noqa: E501
        :rtype: bool
        """
        return self._matches_trino_definition

    @matches_trino_definition.setter
    def matches_trino_definition(self, matches_trino_definition):
        """Sets the matches_trino_definition of this MaterializedViewDataset.

        If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views  # noqa: E501

        :param matches_trino_definition: The matches_trino_definition of this MaterializedViewDataset.  # noqa: E501
        :type: bool
        """

        self._matches_trino_definition = matches_trino_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterializedViewDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterializedViewDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
