# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterializedViewImportMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'scheduled_time': 'datetime',
        'start_time': 'datetime',
        'finish_time': 'datetime',
        'row_count': 'int',
        'error': 'str'
    }

    attribute_map = {
        'status': 'status',
        'scheduled_time': 'scheduledTime',
        'start_time': 'startTime',
        'finish_time': 'finishTime',
        'row_count': 'rowCount',
        'error': 'error'
    }

    def __init__(self, status=None, scheduled_time=None, start_time=None, finish_time=None, row_count=None, error=None):  # noqa: E501
        """MaterializedViewImportMetadata - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._scheduled_time = None
        self._start_time = None
        self._finish_time = None
        self._row_count = None
        self._error = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if scheduled_time is not None:
            self.scheduled_time = scheduled_time
        if start_time is not None:
            self.start_time = start_time
        if finish_time is not None:
            self.finish_time = finish_time
        if row_count is not None:
            self.row_count = row_count
        if error is not None:
            self.error = error

    @property
    def status(self):
        """Gets the status of this MaterializedViewImportMetadata.  # noqa: E501

        Import status.  # noqa: E501

        :return: The status of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MaterializedViewImportMetadata.

        Import status.  # noqa: E501

        :param status: The status of this MaterializedViewImportMetadata.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this MaterializedViewImportMetadata.  # noqa: E501

        Scheduled time of the import.  # noqa: E501

        :return: The scheduled_time of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this MaterializedViewImportMetadata.

        Scheduled time of the import.  # noqa: E501

        :param scheduled_time: The scheduled_time of this MaterializedViewImportMetadata.  # noqa: E501
        :type: datetime
        """

        self._scheduled_time = scheduled_time

    @property
    def start_time(self):
        """Gets the start_time of this MaterializedViewImportMetadata.  # noqa: E501

        The start time of the import.  # noqa: E501

        :return: The start_time of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MaterializedViewImportMetadata.

        The start time of the import.  # noqa: E501

        :param start_time: The start_time of this MaterializedViewImportMetadata.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def finish_time(self):
        """Gets the finish_time of this MaterializedViewImportMetadata.  # noqa: E501

        The finish time of the import.  # noqa: E501

        :return: The finish_time of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this MaterializedViewImportMetadata.

        The finish time of the import.  # noqa: E501

        :param finish_time: The finish_time of this MaterializedViewImportMetadata.  # noqa: E501
        :type: datetime
        """

        self._finish_time = finish_time

    @property
    def row_count(self):
        """Gets the row_count of this MaterializedViewImportMetadata.  # noqa: E501

        Row count of the import.  # noqa: E501

        :return: The row_count of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this MaterializedViewImportMetadata.

        Row count of the import.  # noqa: E501

        :param row_count: The row_count of this MaterializedViewImportMetadata.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def error(self):
        """Gets the error of this MaterializedViewImportMetadata.  # noqa: E501

        Error message of the import.  # noqa: E501

        :return: The error of this MaterializedViewImportMetadata.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MaterializedViewImportMetadata.

        Error message of the import.  # noqa: E501

        :param error: The error of this MaterializedViewImportMetadata.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterializedViewImportMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterializedViewImportMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
