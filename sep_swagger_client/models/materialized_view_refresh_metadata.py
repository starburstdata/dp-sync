# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterializedViewRefreshMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_import': 'MaterializedViewImportMetadata',
        'incremental_column': 'str',
        'refresh_interval': 'str',
        'estimated_next_refresh_time': 'datetime'
    }

    attribute_map = {
        'last_import': 'lastImport',
        'incremental_column': 'incrementalColumn',
        'refresh_interval': 'refreshInterval',
        'estimated_next_refresh_time': 'estimatedNextRefreshTime'
    }

    def __init__(self, last_import=None, incremental_column=None, refresh_interval=None, estimated_next_refresh_time=None):  # noqa: E501
        """MaterializedViewRefreshMetadata - a model defined in Swagger"""  # noqa: E501
        self._last_import = None
        self._incremental_column = None
        self._refresh_interval = None
        self._estimated_next_refresh_time = None
        self.discriminator = None
        if last_import is not None:
            self.last_import = last_import
        if incremental_column is not None:
            self.incremental_column = incremental_column
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if estimated_next_refresh_time is not None:
            self.estimated_next_refresh_time = estimated_next_refresh_time

    @property
    def last_import(self):
        """Gets the last_import of this MaterializedViewRefreshMetadata.  # noqa: E501


        :return: The last_import of this MaterializedViewRefreshMetadata.  # noqa: E501
        :rtype: MaterializedViewImportMetadata
        """
        return self._last_import

    @last_import.setter
    def last_import(self, last_import):
        """Sets the last_import of this MaterializedViewRefreshMetadata.


        :param last_import: The last_import of this MaterializedViewRefreshMetadata.  # noqa: E501
        :type: MaterializedViewImportMetadata
        """

        self._last_import = last_import

    @property
    def incremental_column(self):
        """Gets the incremental_column of this MaterializedViewRefreshMetadata.  # noqa: E501

        Column used for incremental refresh to apply an incremental_column > max(incremental_column) filter when loading data incrementally from the source table. This facilitates loading only newer data from the source table instead of the entire table in each refresh iteration. If no column is specified, a full refresh is executed. The column need to be monotonically increasing with each new record. Typically types are dates or increasing integer values used as identifiers.  # noqa: E501

        :return: The incremental_column of this MaterializedViewRefreshMetadata.  # noqa: E501
        :rtype: str
        """
        return self._incremental_column

    @incremental_column.setter
    def incremental_column(self, incremental_column):
        """Sets the incremental_column of this MaterializedViewRefreshMetadata.

        Column used for incremental refresh to apply an incremental_column > max(incremental_column) filter when loading data incrementally from the source table. This facilitates loading only newer data from the source table instead of the entire table in each refresh iteration. If no column is specified, a full refresh is executed. The column need to be monotonically increasing with each new record. Typically types are dates or increasing integer values used as identifiers.  # noqa: E501

        :param incremental_column: The incremental_column of this MaterializedViewRefreshMetadata.  # noqa: E501
        :type: str
        """

        self._incremental_column = incremental_column

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this MaterializedViewRefreshMetadata.  # noqa: E501

        Refresh interval of the materialized view.  Minimum duration is 60 minutes.  # noqa: E501

        :return: The refresh_interval of this MaterializedViewRefreshMetadata.  # noqa: E501
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this MaterializedViewRefreshMetadata.

        Refresh interval of the materialized view.  Minimum duration is 60 minutes.  # noqa: E501

        :param refresh_interval: The refresh_interval of this MaterializedViewRefreshMetadata.  # noqa: E501
        :type: str
        """

        self._refresh_interval = refresh_interval

    @property
    def estimated_next_refresh_time(self):
        """Gets the estimated_next_refresh_time of this MaterializedViewRefreshMetadata.  # noqa: E501

        Estimated time for the next refresh of the materialized view.  # noqa: E501

        :return: The estimated_next_refresh_time of this MaterializedViewRefreshMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_next_refresh_time

    @estimated_next_refresh_time.setter
    def estimated_next_refresh_time(self, estimated_next_refresh_time):
        """Sets the estimated_next_refresh_time of this MaterializedViewRefreshMetadata.

        Estimated time for the next refresh of the materialized view.  # noqa: E501

        :param estimated_next_refresh_time: The estimated_next_refresh_time of this MaterializedViewRefreshMetadata.  # noqa: E501
        :type: datetime
        """

        self._estimated_next_refresh_time = estimated_next_refresh_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterializedViewRefreshMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterializedViewRefreshMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
