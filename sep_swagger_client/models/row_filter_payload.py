# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RowFilterPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'TableEntityData',
        'expression_id': 'int'
    }

    attribute_map = {
        'entity': 'entity',
        'expression_id': 'expressionId'
    }

    def __init__(self, entity=None, expression_id=None):  # noqa: E501
        """RowFilterPayload - a model defined in Swagger"""  # noqa: E501
        self._entity = None
        self._expression_id = None
        self.discriminator = None
        self.entity = entity
        self.expression_id = expression_id

    @property
    def entity(self):
        """Gets the entity of this RowFilterPayload.  # noqa: E501


        :return: The entity of this RowFilterPayload.  # noqa: E501
        :rtype: TableEntityData
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this RowFilterPayload.


        :param entity: The entity of this RowFilterPayload.  # noqa: E501
        :type: TableEntityData
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def expression_id(self):
        """Gets the expression_id of this RowFilterPayload.  # noqa: E501

        Id of the row filter expression to apply in the given entity  # noqa: E501

        :return: The expression_id of this RowFilterPayload.  # noqa: E501
        :rtype: int
        """
        return self._expression_id

    @expression_id.setter
    def expression_id(self, expression_id):
        """Sets the expression_id of this RowFilterPayload.

        Id of the row filter expression to apply in the given entity  # noqa: E501

        :param expression_id: The expression_id of this RowFilterPayload.  # noqa: E501
        :type: int
        """
        if expression_id is None:
            raise ValueError("Invalid value for `expression_id`, must not be `None`")  # noqa: E501

        self._expression_id = expression_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowFilterPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowFilterPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
