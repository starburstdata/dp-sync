# coding: utf-8

"""
    Starburst Enterprise API documentation

    Documentation with details about endpoints and entities.  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from sep_swagger_client.models.error_detail_type import ErrorDetailType  # noqa: F401,E501

class SqlParsingError(ErrorDetailType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_name': 'str',
        'line_number': 'int',
        'column_number': 'int'
    }
    if hasattr(ErrorDetailType, "swagger_types"):
        swagger_types.update(ErrorDetailType.swagger_types)

    attribute_map = {
        'dataset_name': 'datasetName',
        'line_number': 'lineNumber',
        'column_number': 'columnNumber'
    }
    if hasattr(ErrorDetailType, "attribute_map"):
        attribute_map.update(ErrorDetailType.attribute_map)

    def __init__(self, dataset_name=None, line_number=None, column_number=None, *args, **kwargs):  # noqa: E501
        """SqlParsingError - a model defined in Swagger"""  # noqa: E501
        self._dataset_name = None
        self._line_number = None
        self._column_number = None
        self.discriminator = None
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if line_number is not None:
            self.line_number = line_number
        if column_number is not None:
            self.column_number = column_number
        ErrorDetailType.__init__(self, *args, **kwargs)

    @property
    def dataset_name(self):
        """Gets the dataset_name of this SqlParsingError.  # noqa: E501


        :return: The dataset_name of this SqlParsingError.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this SqlParsingError.


        :param dataset_name: The dataset_name of this SqlParsingError.  # noqa: E501
        :type: str
        """

        self._dataset_name = dataset_name

    @property
    def line_number(self):
        """Gets the line_number of this SqlParsingError.  # noqa: E501


        :return: The line_number of this SqlParsingError.  # noqa: E501
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this SqlParsingError.


        :param line_number: The line_number of this SqlParsingError.  # noqa: E501
        :type: int
        """

        self._line_number = line_number

    @property
    def column_number(self):
        """Gets the column_number of this SqlParsingError.  # noqa: E501


        :return: The column_number of this SqlParsingError.  # noqa: E501
        :rtype: int
        """
        return self._column_number

    @column_number.setter
    def column_number(self, column_number):
        """Sets the column_number of this SqlParsingError.


        :param column_number: The column_number of this SqlParsingError.  # noqa: E501
        :type: int
        """

        self._column_number = column_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SqlParsingError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SqlParsingError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
